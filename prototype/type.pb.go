// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: prototype/type.proto

package prototype

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AccountName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AccountName) Reset() {
	*x = AccountName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountName) ProtoMessage() {}

func (x *AccountName) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountName.ProtoReflect.Descriptor instead.
func (*AccountName) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{0}
}

func (x *AccountName) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ChainId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ChainId) Reset() {
	*x = ChainId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainId) ProtoMessage() {}

func (x *ChainId) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainId.ProtoReflect.Descriptor instead.
func (*ChainId) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{1}
}

func (x *ChainId) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{2}
}

func (x *Coin) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Vest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Vest) Reset() {
	*x = Vest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vest) ProtoMessage() {}

func (x *Vest) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vest.ProtoReflect.Descriptor instead.
func (*Vest) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{3}
}

func (x *Vest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type PublicKeyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PublicKeyType) Reset() {
	*x = PublicKeyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyType) ProtoMessage() {}

func (x *PublicKeyType) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyType.ProtoReflect.Descriptor instead.
func (*PublicKeyType) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{4}
}

func (x *PublicKeyType) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type PrivateKeyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PrivateKeyType) Reset() {
	*x = PrivateKeyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateKeyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKeyType) ProtoMessage() {}

func (x *PrivateKeyType) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKeyType.ProtoReflect.Descriptor instead.
func (*PrivateKeyType) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{5}
}

func (x *PrivateKeyType) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TimePointSec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UtcSeconds uint32 `protobuf:"varint,1,opt,name=utc_seconds,json=utcSeconds,proto3" json:"utc_seconds,omitempty"`
}

func (x *TimePointSec) Reset() {
	*x = TimePointSec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePointSec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePointSec) ProtoMessage() {}

func (x *TimePointSec) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePointSec.ProtoReflect.Descriptor instead.
func (*TimePointSec) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{6}
}

func (x *TimePointSec) GetUtcSeconds() uint32 {
	if x != nil {
		return x.UtcSeconds
	}
	return 0
}

type SignatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sig []byte `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *SignatureType) Reset() {
	*x = SignatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureType) ProtoMessage() {}

func (x *SignatureType) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureType.ProtoReflect.Descriptor instead.
func (*SignatureType) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{7}
}

func (x *SignatureType) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

type Sha256 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Sha256) Reset() {
	*x = Sha256{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sha256) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sha256) ProtoMessage() {}

func (x *Sha256) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sha256.ProtoReflect.Descriptor instead.
func (*Sha256) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{8}
}

func (x *Sha256) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GiftTicketKeyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        uint32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	From        string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To          string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	CreateBlock uint64 `protobuf:"varint,4,opt,name=create_block,json=createBlock,proto3" json:"create_block,omitempty"`
}

func (x *GiftTicketKeyType) Reset() {
	*x = GiftTicketKeyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GiftTicketKeyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GiftTicketKeyType) ProtoMessage() {}

func (x *GiftTicketKeyType) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GiftTicketKeyType.ProtoReflect.Descriptor instead.
func (*GiftTicketKeyType) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{9}
}

func (x *GiftTicketKeyType) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GiftTicketKeyType) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *GiftTicketKeyType) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GiftTicketKeyType) GetCreateBlock() uint64 {
	if x != nil {
		return x.CreateBlock
	}
	return 0
}

type ChainProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountCreationFee   *Coin  `protobuf:"bytes,1,opt,name=account_creation_fee,json=accountCreationFee,proto3" json:"account_creation_fee,omitempty"`
	StaminaFree          uint64 `protobuf:"varint,2,opt,name=stamina_free,json=staminaFree,proto3" json:"stamina_free,omitempty"`
	TpsExpected          uint64 `protobuf:"varint,3,opt,name=tps_expected,json=tpsExpected,proto3" json:"tps_expected,omitempty"`
	TopNAcquireFreeToken uint32 `protobuf:"varint,4,opt,name=top_n_acquire_free_token,json=topNAcquireFreeToken,proto3" json:"top_n_acquire_free_token,omitempty"`
	EpochDuration        uint64 `protobuf:"varint,5,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
	PerTicketPrice       *Coin  `protobuf:"bytes,6,opt,name=per_ticket_price,json=perTicketPrice,proto3" json:"per_ticket_price,omitempty"`
	PerTicketWeight      uint64 `protobuf:"varint,7,opt,name=per_ticket_weight,json=perTicketWeight,proto3" json:"per_ticket_weight,omitempty"`
}

func (x *ChainProperties) Reset() {
	*x = ChainProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainProperties) ProtoMessage() {}

func (x *ChainProperties) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainProperties.ProtoReflect.Descriptor instead.
func (*ChainProperties) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{10}
}

func (x *ChainProperties) GetAccountCreationFee() *Coin {
	if x != nil {
		return x.AccountCreationFee
	}
	return nil
}

func (x *ChainProperties) GetStaminaFree() uint64 {
	if x != nil {
		return x.StaminaFree
	}
	return 0
}

func (x *ChainProperties) GetTpsExpected() uint64 {
	if x != nil {
		return x.TpsExpected
	}
	return 0
}

func (x *ChainProperties) GetTopNAcquireFreeToken() uint32 {
	if x != nil {
		return x.TopNAcquireFreeToken
	}
	return 0
}

func (x *ChainProperties) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *ChainProperties) GetPerTicketPrice() *Coin {
	if x != nil {
		return x.PerTicketPrice
	}
	return nil
}

func (x *ChainProperties) GetPerTicketWeight() uint64 {
	if x != nil {
		return x.PerTicketWeight
	}
	return 0
}

type DynamicProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadBlockId                *Sha256       `protobuf:"bytes,1,opt,name=head_block_id,json=headBlockId,proto3" json:"head_block_id,omitempty"`
	HeadBlockNumber            uint64        `protobuf:"varint,2,opt,name=head_block_number,json=headBlockNumber,proto3" json:"head_block_number,omitempty"`
	TotalCos                   *Coin         `protobuf:"bytes,3,opt,name=total_cos,json=totalCos,proto3" json:"total_cos,omitempty"`
	Time                       *TimePointSec `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	CurrentBlockProducer       *AccountName  `protobuf:"bytes,5,opt,name=current_block_producer,json=currentBlockProducer,proto3" json:"current_block_producer,omitempty"`
	Tps                        uint32        `protobuf:"varint,6,opt,name=tps,proto3" json:"tps,omitempty"`
	TotalVest                  *Vest         `protobuf:"bytes,7,opt,name=total_vest,json=totalVest,proto3" json:"total_vest,omitempty"`
	TotalTrxCnt                uint64        `protobuf:"varint,8,opt,name=total_trx_cnt,json=totalTrxCnt,proto3" json:"total_trx_cnt,omitempty"`
	TotalPostCnt               uint64        `protobuf:"varint,9,opt,name=total_post_cnt,json=totalPostCnt,proto3" json:"total_post_cnt,omitempty"`
	TotalUserCnt               uint64        `protobuf:"varint,10,opt,name=total_user_cnt,json=totalUserCnt,proto3" json:"total_user_cnt,omitempty"`
	MaxTps                     uint32        `protobuf:"varint,11,opt,name=max_tps,json=maxTps,proto3" json:"max_tps,omitempty"`
	MaxTpsBlockNum             uint64        `protobuf:"varint,12,opt,name=max_tps_block_num,json=maxTpsBlockNum,proto3" json:"max_tps_block_num,omitempty"`
	IthYear                    uint32        `protobuf:"varint,13,opt,name=ith_year,json=ithYear,proto3" json:"ith_year,omitempty"`
	AnnualBudget               *Vest         `protobuf:"bytes,14,opt,name=annual_budget,json=annualBudget,proto3" json:"annual_budget,omitempty"`
	AnnualMinted               *Vest         `protobuf:"bytes,15,opt,name=annual_minted,json=annualMinted,proto3" json:"annual_minted,omitempty"`
	PoolPostRewards            *Vest         `protobuf:"bytes,16,opt,name=pool_post_rewards,json=poolPostRewards,proto3" json:"pool_post_rewards,omitempty"`
	PoolReplyRewards           *Vest         `protobuf:"bytes,17,opt,name=pool_reply_rewards,json=poolReplyRewards,proto3" json:"pool_reply_rewards,omitempty"`
	PoolVoteRewards            *Vest         `protobuf:"bytes,18,opt,name=pool_vote_rewards,json=poolVoteRewards,proto3" json:"pool_vote_rewards,omitempty"`
	PoolDappRewards            *Vest         `protobuf:"bytes,19,opt,name=pool_dapp_rewards,json=poolDappRewards,proto3" json:"pool_dapp_rewards,omitempty"`
	WeightedVpsPost            string        `protobuf:"bytes,20,opt,name=weighted_vps_post,json=weightedVpsPost,proto3" json:"weighted_vps_post,omitempty"`
	WeightedVpsReply           string        `protobuf:"bytes,21,opt,name=weighted_vps_reply,json=weightedVpsReply,proto3" json:"weighted_vps_reply,omitempty"`
	WeightedVpsVote            string        `protobuf:"bytes,22,opt,name=weighted_vps_vote,json=weightedVpsVote,proto3" json:"weighted_vps_vote,omitempty"`
	WeightedVpsDapp            string        `protobuf:"bytes,23,opt,name=weighted_vps_dapp,json=weightedVpsDapp,proto3" json:"weighted_vps_dapp,omitempty"`
	ClaimedPostRewards         *Vest         `protobuf:"bytes,24,opt,name=claimed_post_rewards,json=claimedPostRewards,proto3" json:"claimed_post_rewards,omitempty"`
	ClaimedReplyRewards        *Vest         `protobuf:"bytes,25,opt,name=claimed_reply_rewards,json=claimedReplyRewards,proto3" json:"claimed_reply_rewards,omitempty"`
	ClaimedVoteRewards         *Vest         `protobuf:"bytes,26,opt,name=claimed_vote_rewards,json=claimedVoteRewards,proto3" json:"claimed_vote_rewards,omitempty"`
	ClaimedDappRewards         *Vest         `protobuf:"bytes,27,opt,name=claimed_dapp_rewards,json=claimedDappRewards,proto3" json:"claimed_dapp_rewards,omitempty"`
	StakeVest                  *Vest         `protobuf:"bytes,28,opt,name=stake_vest,json=stakeVest,proto3" json:"stake_vest,omitempty"`
	BlockProducerBootCompleted bool          `protobuf:"varint,29,opt,name=block_producer_boot_completed,json=blockProducerBootCompleted,proto3" json:"block_producer_boot_completed,omitempty"`
	StaminaFree                uint64        `protobuf:"varint,30,opt,name=stamina_free,json=staminaFree,proto3" json:"stamina_free,omitempty"`
	TpsExpected                uint64        `protobuf:"varint,31,opt,name=tps_expected,json=tpsExpected,proto3" json:"tps_expected,omitempty"`
	AvgTpsUpdateBlock          uint64        `protobuf:"varint,32,opt,name=avg_tps_update_block,json=avgTpsUpdateBlock,proto3" json:"avg_tps_update_block,omitempty"`
	AvgTpsInWindow             uint64        `protobuf:"varint,33,opt,name=avg_tps_in_window,json=avgTpsInWindow,proto3" json:"avg_tps_in_window,omitempty"`
	OneDayStamina              uint64        `protobuf:"varint,34,opt,name=one_day_stamina,json=oneDayStamina,proto3" json:"one_day_stamina,omitempty"`
	AccountCreateFee           *Coin         `protobuf:"bytes,35,opt,name=account_create_fee,json=accountCreateFee,proto3" json:"account_create_fee,omitempty"`
	ReputationAdmin            *AccountName  `protobuf:"bytes,36,opt,name=reputation_admin,json=reputationAdmin,proto3" json:"reputation_admin,omitempty"`
	CurrentEpochStartBlock     uint64        `protobuf:"varint,37,opt,name=current_epoch_start_block,json=currentEpochStartBlock,proto3" json:"current_epoch_start_block,omitempty"`
	EpochDuration              uint64        `protobuf:"varint,38,opt,name=epoch_duration,json=epochDuration,proto3" json:"epoch_duration,omitempty"`
	TopNAcquireFreeToken       uint32        `protobuf:"varint,39,opt,name=top_n_acquire_free_token,json=topNAcquireFreeToken,proto3" json:"top_n_acquire_free_token,omitempty"`
	PerTicketPrice             *Coin         `protobuf:"bytes,40,opt,name=per_ticket_price,json=perTicketPrice,proto3" json:"per_ticket_price,omitempty"`
	PerTicketWeight            uint64        `protobuf:"varint,41,opt,name=per_ticket_weight,json=perTicketWeight,proto3" json:"per_ticket_weight,omitempty"`
	TicketsIncome              *Vest         `protobuf:"bytes,42,opt,name=tickets_income,json=ticketsIncome,proto3" json:"tickets_income,omitempty"`
	ChargedTicketsNum          uint64        `protobuf:"varint,43,opt,name=charged_tickets_num,json=chargedTicketsNum,proto3" json:"charged_tickets_num,omitempty"`
	CopyrightAdmin             *AccountName  `protobuf:"bytes,44,opt,name=copyright_admin,json=copyrightAdmin,proto3" json:"copyright_admin,omitempty"`
	TicketsBpBonus             *Vest         `protobuf:"bytes,45,opt,name=tickets_bp_bonus,json=ticketsBpBonus,proto3" json:"tickets_bp_bonus,omitempty"`
}

func (x *DynamicProperties) Reset() {
	*x = DynamicProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicProperties) ProtoMessage() {}

func (x *DynamicProperties) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicProperties.ProtoReflect.Descriptor instead.
func (*DynamicProperties) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicProperties) GetHeadBlockId() *Sha256 {
	if x != nil {
		return x.HeadBlockId
	}
	return nil
}

func (x *DynamicProperties) GetHeadBlockNumber() uint64 {
	if x != nil {
		return x.HeadBlockNumber
	}
	return 0
}

func (x *DynamicProperties) GetTotalCos() *Coin {
	if x != nil {
		return x.TotalCos
	}
	return nil
}

func (x *DynamicProperties) GetTime() *TimePointSec {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *DynamicProperties) GetCurrentBlockProducer() *AccountName {
	if x != nil {
		return x.CurrentBlockProducer
	}
	return nil
}

func (x *DynamicProperties) GetTps() uint32 {
	if x != nil {
		return x.Tps
	}
	return 0
}

func (x *DynamicProperties) GetTotalVest() *Vest {
	if x != nil {
		return x.TotalVest
	}
	return nil
}

func (x *DynamicProperties) GetTotalTrxCnt() uint64 {
	if x != nil {
		return x.TotalTrxCnt
	}
	return 0
}

func (x *DynamicProperties) GetTotalPostCnt() uint64 {
	if x != nil {
		return x.TotalPostCnt
	}
	return 0
}

func (x *DynamicProperties) GetTotalUserCnt() uint64 {
	if x != nil {
		return x.TotalUserCnt
	}
	return 0
}

func (x *DynamicProperties) GetMaxTps() uint32 {
	if x != nil {
		return x.MaxTps
	}
	return 0
}

func (x *DynamicProperties) GetMaxTpsBlockNum() uint64 {
	if x != nil {
		return x.MaxTpsBlockNum
	}
	return 0
}

func (x *DynamicProperties) GetIthYear() uint32 {
	if x != nil {
		return x.IthYear
	}
	return 0
}

func (x *DynamicProperties) GetAnnualBudget() *Vest {
	if x != nil {
		return x.AnnualBudget
	}
	return nil
}

func (x *DynamicProperties) GetAnnualMinted() *Vest {
	if x != nil {
		return x.AnnualMinted
	}
	return nil
}

func (x *DynamicProperties) GetPoolPostRewards() *Vest {
	if x != nil {
		return x.PoolPostRewards
	}
	return nil
}

func (x *DynamicProperties) GetPoolReplyRewards() *Vest {
	if x != nil {
		return x.PoolReplyRewards
	}
	return nil
}

func (x *DynamicProperties) GetPoolVoteRewards() *Vest {
	if x != nil {
		return x.PoolVoteRewards
	}
	return nil
}

func (x *DynamicProperties) GetPoolDappRewards() *Vest {
	if x != nil {
		return x.PoolDappRewards
	}
	return nil
}

func (x *DynamicProperties) GetWeightedVpsPost() string {
	if x != nil {
		return x.WeightedVpsPost
	}
	return ""
}

func (x *DynamicProperties) GetWeightedVpsReply() string {
	if x != nil {
		return x.WeightedVpsReply
	}
	return ""
}

func (x *DynamicProperties) GetWeightedVpsVote() string {
	if x != nil {
		return x.WeightedVpsVote
	}
	return ""
}

func (x *DynamicProperties) GetWeightedVpsDapp() string {
	if x != nil {
		return x.WeightedVpsDapp
	}
	return ""
}

func (x *DynamicProperties) GetClaimedPostRewards() *Vest {
	if x != nil {
		return x.ClaimedPostRewards
	}
	return nil
}

func (x *DynamicProperties) GetClaimedReplyRewards() *Vest {
	if x != nil {
		return x.ClaimedReplyRewards
	}
	return nil
}

func (x *DynamicProperties) GetClaimedVoteRewards() *Vest {
	if x != nil {
		return x.ClaimedVoteRewards
	}
	return nil
}

func (x *DynamicProperties) GetClaimedDappRewards() *Vest {
	if x != nil {
		return x.ClaimedDappRewards
	}
	return nil
}

func (x *DynamicProperties) GetStakeVest() *Vest {
	if x != nil {
		return x.StakeVest
	}
	return nil
}

func (x *DynamicProperties) GetBlockProducerBootCompleted() bool {
	if x != nil {
		return x.BlockProducerBootCompleted
	}
	return false
}

func (x *DynamicProperties) GetStaminaFree() uint64 {
	if x != nil {
		return x.StaminaFree
	}
	return 0
}

func (x *DynamicProperties) GetTpsExpected() uint64 {
	if x != nil {
		return x.TpsExpected
	}
	return 0
}

func (x *DynamicProperties) GetAvgTpsUpdateBlock() uint64 {
	if x != nil {
		return x.AvgTpsUpdateBlock
	}
	return 0
}

func (x *DynamicProperties) GetAvgTpsInWindow() uint64 {
	if x != nil {
		return x.AvgTpsInWindow
	}
	return 0
}

func (x *DynamicProperties) GetOneDayStamina() uint64 {
	if x != nil {
		return x.OneDayStamina
	}
	return 0
}

func (x *DynamicProperties) GetAccountCreateFee() *Coin {
	if x != nil {
		return x.AccountCreateFee
	}
	return nil
}

func (x *DynamicProperties) GetReputationAdmin() *AccountName {
	if x != nil {
		return x.ReputationAdmin
	}
	return nil
}

func (x *DynamicProperties) GetCurrentEpochStartBlock() uint64 {
	if x != nil {
		return x.CurrentEpochStartBlock
	}
	return 0
}

func (x *DynamicProperties) GetEpochDuration() uint64 {
	if x != nil {
		return x.EpochDuration
	}
	return 0
}

func (x *DynamicProperties) GetTopNAcquireFreeToken() uint32 {
	if x != nil {
		return x.TopNAcquireFreeToken
	}
	return 0
}

func (x *DynamicProperties) GetPerTicketPrice() *Coin {
	if x != nil {
		return x.PerTicketPrice
	}
	return nil
}

func (x *DynamicProperties) GetPerTicketWeight() uint64 {
	if x != nil {
		return x.PerTicketWeight
	}
	return 0
}

func (x *DynamicProperties) GetTicketsIncome() *Vest {
	if x != nil {
		return x.TicketsIncome
	}
	return nil
}

func (x *DynamicProperties) GetChargedTicketsNum() uint64 {
	if x != nil {
		return x.ChargedTicketsNum
	}
	return 0
}

func (x *DynamicProperties) GetCopyrightAdmin() *AccountName {
	if x != nil {
		return x.CopyrightAdmin
	}
	return nil
}

func (x *DynamicProperties) GetTicketsBpBonus() *Vest {
	if x != nil {
		return x.TicketsBpBonus
	}
	return nil
}

type BeneficiaryRouteType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *AccountName `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight uint32       `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *BeneficiaryRouteType) Reset() {
	*x = BeneficiaryRouteType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_type_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeneficiaryRouteType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeneficiaryRouteType) ProtoMessage() {}

func (x *BeneficiaryRouteType) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_type_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeneficiaryRouteType.ProtoReflect.Descriptor instead.
func (*BeneficiaryRouteType) Descriptor() ([]byte, []int) {
	return file_prototype_type_proto_rawDescGZIP(), []int{12}
}

func (x *BeneficiaryRouteType) GetName() *AccountName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *BeneficiaryRouteType) GetWeight() uint32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

var File_prototype_type_proto protoreflect.FileDescriptor

var file_prototype_type_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x24, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x20, 0x0a, 0x04, 0x76,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x26, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x74, 0x63, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x22, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x73, 0x69, 0x67, 0x22, 0x1c, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x71, 0x0a, 0x14, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74,
	0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xe1, 0x02, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x70, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x70, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x5f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x70, 0x4e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x65,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x80, 0x12, 0x0a, 0x12, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x35, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x4d, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x70, 0x73,
	0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x78, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72,
	0x78, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x54, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x70, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x70, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x68, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x69, 0x74, 0x68, 0x59,
	0x65, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x62, 0x75,
	0x64, 0x67, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x0c, 0x61, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x42, 0x75, 0x64, 0x67, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x6e, 0x6e,
	0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x74, 0x65, 0x64, 0x12,
	0x3b, 0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3d, 0x0a, 0x12,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x10, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x70,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x3b, 0x0a, 0x11, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x64, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x65, 0x73, 0x74, 0x52, 0x0f, 0x70, 0x6f, 0x6f, 0x6c, 0x44, 0x61, 0x70, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x5f, 0x76, 0x70, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x70, 0x73, 0x50, 0x6f, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x70,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x70, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2a, 0x0a, 0x11, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x73, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x56, 0x70, 0x73, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x70, 0x73, 0x5f, 0x64, 0x61, 0x70, 0x70,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64,
	0x56, 0x70, 0x73, 0x44, 0x61, 0x70, 0x70, 0x12, 0x41, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x50,
	0x6f, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x15, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x41, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x41, 0x0a, 0x14, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x70, 0x70, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73,
	0x74, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x70, 0x70, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x76,
	0x65, 0x73, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x56, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x46, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x70, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x74, 0x70, 0x73, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2f,
	0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x70, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x61, 0x76,
	0x67, 0x54, 0x70, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x29, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x74, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x54,
	0x70, 0x73, 0x49, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x6e,
	0x65, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x44, 0x61, 0x79, 0x53, 0x74, 0x61, 0x6d, 0x69,
	0x6e, 0x61, 0x12, 0x3d, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x12, 0x42, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x25, 0x0a, 0x0e, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x18, 0x74, 0x6f, 0x70, 0x5f, 0x6e,
	0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x74, 0x6f, 0x70, 0x4e, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x39, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x65,
	0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52,
	0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x40,
	0x0a, 0x0f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x0e, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x39, 0x0a, 0x10, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x62, 0x70, 0x5f, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x65, 0x73, 0x74, 0x52, 0x0e, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x42, 0x70, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x16, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x63, 0x69, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x50, 0x0a, 0x22, 0x69, 0x6f,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f,
	0x69, 0x64, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x2d,
	0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prototype_type_proto_rawDescOnce sync.Once
	file_prototype_type_proto_rawDescData = file_prototype_type_proto_rawDesc
)

func file_prototype_type_proto_rawDescGZIP() []byte {
	file_prototype_type_proto_rawDescOnce.Do(func() {
		file_prototype_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_prototype_type_proto_rawDescData)
	})
	return file_prototype_type_proto_rawDescData
}

var file_prototype_type_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_prototype_type_proto_goTypes = []interface{}{
	(*AccountName)(nil),          // 0: prototype.account_name
	(*ChainId)(nil),              // 1: prototype.chain_id
	(*Coin)(nil),                 // 2: prototype.coin
	(*Vest)(nil),                 // 3: prototype.vest
	(*PublicKeyType)(nil),        // 4: prototype.public_key_type
	(*PrivateKeyType)(nil),       // 5: prototype.private_key_type
	(*TimePointSec)(nil),         // 6: prototype.time_point_sec
	(*SignatureType)(nil),        // 7: prototype.signature_type
	(*Sha256)(nil),               // 8: prototype.sha256
	(*GiftTicketKeyType)(nil),    // 9: prototype.gift_ticket_key_type
	(*ChainProperties)(nil),      // 10: prototype.chain_properties
	(*DynamicProperties)(nil),    // 11: prototype.dynamic_properties
	(*BeneficiaryRouteType)(nil), // 12: prototype.beneficiary_route_type
}
var file_prototype_type_proto_depIdxs = []int32{
	2,  // 0: prototype.chain_properties.account_creation_fee:type_name -> prototype.coin
	2,  // 1: prototype.chain_properties.per_ticket_price:type_name -> prototype.coin
	8,  // 2: prototype.dynamic_properties.head_block_id:type_name -> prototype.sha256
	2,  // 3: prototype.dynamic_properties.total_cos:type_name -> prototype.coin
	6,  // 4: prototype.dynamic_properties.time:type_name -> prototype.time_point_sec
	0,  // 5: prototype.dynamic_properties.current_block_producer:type_name -> prototype.account_name
	3,  // 6: prototype.dynamic_properties.total_vest:type_name -> prototype.vest
	3,  // 7: prototype.dynamic_properties.annual_budget:type_name -> prototype.vest
	3,  // 8: prototype.dynamic_properties.annual_minted:type_name -> prototype.vest
	3,  // 9: prototype.dynamic_properties.pool_post_rewards:type_name -> prototype.vest
	3,  // 10: prototype.dynamic_properties.pool_reply_rewards:type_name -> prototype.vest
	3,  // 11: prototype.dynamic_properties.pool_vote_rewards:type_name -> prototype.vest
	3,  // 12: prototype.dynamic_properties.pool_dapp_rewards:type_name -> prototype.vest
	3,  // 13: prototype.dynamic_properties.claimed_post_rewards:type_name -> prototype.vest
	3,  // 14: prototype.dynamic_properties.claimed_reply_rewards:type_name -> prototype.vest
	3,  // 15: prototype.dynamic_properties.claimed_vote_rewards:type_name -> prototype.vest
	3,  // 16: prototype.dynamic_properties.claimed_dapp_rewards:type_name -> prototype.vest
	3,  // 17: prototype.dynamic_properties.stake_vest:type_name -> prototype.vest
	2,  // 18: prototype.dynamic_properties.account_create_fee:type_name -> prototype.coin
	0,  // 19: prototype.dynamic_properties.reputation_admin:type_name -> prototype.account_name
	2,  // 20: prototype.dynamic_properties.per_ticket_price:type_name -> prototype.coin
	3,  // 21: prototype.dynamic_properties.tickets_income:type_name -> prototype.vest
	0,  // 22: prototype.dynamic_properties.copyright_admin:type_name -> prototype.account_name
	3,  // 23: prototype.dynamic_properties.tickets_bp_bonus:type_name -> prototype.vest
	0,  // 24: prototype.beneficiary_route_type.name:type_name -> prototype.account_name
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_prototype_type_proto_init() }
func file_prototype_type_proto_init() {
	if File_prototype_type_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prototype_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateKeyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimePointSec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sha256); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GiftTicketKeyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_type_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeneficiaryRouteType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prototype_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prototype_type_proto_goTypes,
		DependencyIndexes: file_prototype_type_proto_depIdxs,
		MessageInfos:      file_prototype_type_proto_msgTypes,
	}.Build()
	File_prototype_type_proto = out.File
	file_prototype_type_proto_rawDesc = nil
	file_prototype_type_proto_goTypes = nil
	file_prototype_type_proto_depIdxs = nil
}
