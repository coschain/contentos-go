// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.3
// source: prototype/transaction.proto

package prototype

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//	*Operation_Op1
	//	*Operation_Op2
	//	*Operation_Op3
	//	*Operation_Op4
	//	*Operation_Op5
	//	*Operation_Op6
	//	*Operation_Op7
	//	*Operation_Op8
	//	*Operation_Op9
	//	*Operation_Op10
	//	*Operation_Op13
	//	*Operation_Op14
	//	*Operation_Op16
	//	*Operation_Op17
	//	*Operation_Op18
	//	*Operation_Op19
	//	*Operation_Op20
	//	*Operation_Op21
	//	*Operation_Op22
	//	*Operation_Op23
	//	*Operation_Op24
	Op isOperation_Op `protobuf_oneof:"op"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{0}
}

func (m *Operation) GetOp() isOperation_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *Operation) GetOp1() *AccountCreateOperation {
	if x, ok := x.GetOp().(*Operation_Op1); ok {
		return x.Op1
	}
	return nil
}

func (x *Operation) GetOp2() *TransferOperation {
	if x, ok := x.GetOp().(*Operation_Op2); ok {
		return x.Op2
	}
	return nil
}

func (x *Operation) GetOp3() *BpRegisterOperation {
	if x, ok := x.GetOp().(*Operation_Op3); ok {
		return x.Op3
	}
	return nil
}

func (x *Operation) GetOp4() *BpEnableOperation {
	if x, ok := x.GetOp().(*Operation_Op4); ok {
		return x.Op4
	}
	return nil
}

func (x *Operation) GetOp5() *BpVoteOperation {
	if x, ok := x.GetOp().(*Operation_Op5); ok {
		return x.Op5
	}
	return nil
}

func (x *Operation) GetOp6() *PostOperation {
	if x, ok := x.GetOp().(*Operation_Op6); ok {
		return x.Op6
	}
	return nil
}

func (x *Operation) GetOp7() *ReplyOperation {
	if x, ok := x.GetOp().(*Operation_Op7); ok {
		return x.Op7
	}
	return nil
}

func (x *Operation) GetOp8() *FollowOperation {
	if x, ok := x.GetOp().(*Operation_Op8); ok {
		return x.Op8
	}
	return nil
}

func (x *Operation) GetOp9() *VoteOperation {
	if x, ok := x.GetOp().(*Operation_Op9); ok {
		return x.Op9
	}
	return nil
}

func (x *Operation) GetOp10() *TransferToVestOperation {
	if x, ok := x.GetOp().(*Operation_Op10); ok {
		return x.Op10
	}
	return nil
}

func (x *Operation) GetOp13() *ContractDeployOperation {
	if x, ok := x.GetOp().(*Operation_Op13); ok {
		return x.Op13
	}
	return nil
}

func (x *Operation) GetOp14() *ContractApplyOperation {
	if x, ok := x.GetOp().(*Operation_Op14); ok {
		return x.Op14
	}
	return nil
}

func (x *Operation) GetOp16() *ConvertVestOperation {
	if x, ok := x.GetOp().(*Operation_Op16); ok {
		return x.Op16
	}
	return nil
}

func (x *Operation) GetOp17() *StakeOperation {
	if x, ok := x.GetOp().(*Operation_Op17); ok {
		return x.Op17
	}
	return nil
}

func (x *Operation) GetOp18() *UnStakeOperation {
	if x, ok := x.GetOp().(*Operation_Op18); ok {
		return x.Op18
	}
	return nil
}

func (x *Operation) GetOp19() *BpUpdateOperation {
	if x, ok := x.GetOp().(*Operation_Op19); ok {
		return x.Op19
	}
	return nil
}

func (x *Operation) GetOp20() *AccountUpdateOperation {
	if x, ok := x.GetOp().(*Operation_Op20); ok {
		return x.Op20
	}
	return nil
}

func (x *Operation) GetOp21() *AcquireTicketOperation {
	if x, ok := x.GetOp().(*Operation_Op21); ok {
		return x.Op21
	}
	return nil
}

func (x *Operation) GetOp22() *VoteByTicketOperation {
	if x, ok := x.GetOp().(*Operation_Op22); ok {
		return x.Op22
	}
	return nil
}

func (x *Operation) GetOp23() *DelegateVestOperation {
	if x, ok := x.GetOp().(*Operation_Op23); ok {
		return x.Op23
	}
	return nil
}

func (x *Operation) GetOp24() *UnDelegateVestOperation {
	if x, ok := x.GetOp().(*Operation_Op24); ok {
		return x.Op24
	}
	return nil
}

type isOperation_Op interface {
	isOperation_Op()
}

type Operation_Op1 struct {
	Op1 *AccountCreateOperation `protobuf:"bytes,1,opt,name=op1,proto3,oneof"`
}

type Operation_Op2 struct {
	Op2 *TransferOperation `protobuf:"bytes,2,opt,name=op2,proto3,oneof"`
}

type Operation_Op3 struct {
	Op3 *BpRegisterOperation `protobuf:"bytes,3,opt,name=op3,proto3,oneof"`
}

type Operation_Op4 struct {
	Op4 *BpEnableOperation `protobuf:"bytes,4,opt,name=op4,proto3,oneof"`
}

type Operation_Op5 struct {
	Op5 *BpVoteOperation `protobuf:"bytes,5,opt,name=op5,proto3,oneof"`
}

type Operation_Op6 struct {
	Op6 *PostOperation `protobuf:"bytes,6,opt,name=op6,proto3,oneof"`
}

type Operation_Op7 struct {
	Op7 *ReplyOperation `protobuf:"bytes,7,opt,name=op7,proto3,oneof"`
}

type Operation_Op8 struct {
	Op8 *FollowOperation `protobuf:"bytes,8,opt,name=op8,proto3,oneof"`
}

type Operation_Op9 struct {
	Op9 *VoteOperation `protobuf:"bytes,9,opt,name=op9,proto3,oneof"`
}

type Operation_Op10 struct {
	Op10 *TransferToVestOperation `protobuf:"bytes,10,opt,name=op10,proto3,oneof"`
}

type Operation_Op13 struct {
	//claim_operation op11 = 11;
	//claim_all_operation op12 = 12;
	Op13 *ContractDeployOperation `protobuf:"bytes,13,opt,name=op13,proto3,oneof"`
}

type Operation_Op14 struct {
	Op14 *ContractApplyOperation `protobuf:"bytes,14,opt,name=op14,proto3,oneof"`
}

type Operation_Op16 struct {
	//report_operation op15 = 15;
	Op16 *ConvertVestOperation `protobuf:"bytes,16,opt,name=op16,proto3,oneof"`
}

type Operation_Op17 struct {
	Op17 *StakeOperation `protobuf:"bytes,17,opt,name=op17,proto3,oneof"`
}

type Operation_Op18 struct {
	Op18 *UnStakeOperation `protobuf:"bytes,18,opt,name=op18,proto3,oneof"`
}

type Operation_Op19 struct {
	Op19 *BpUpdateOperation `protobuf:"bytes,19,opt,name=op19,proto3,oneof"`
}

type Operation_Op20 struct {
	Op20 *AccountUpdateOperation `protobuf:"bytes,20,opt,name=op20,proto3,oneof"`
}

type Operation_Op21 struct {
	Op21 *AcquireTicketOperation `protobuf:"bytes,21,opt,name=op21,proto3,oneof"`
}

type Operation_Op22 struct {
	Op22 *VoteByTicketOperation `protobuf:"bytes,22,opt,name=op22,proto3,oneof"`
}

type Operation_Op23 struct {
	Op23 *DelegateVestOperation `protobuf:"bytes,23,opt,name=op23,proto3,oneof"`
}

type Operation_Op24 struct {
	Op24 *UnDelegateVestOperation `protobuf:"bytes,24,opt,name=op24,proto3,oneof"`
}

func (*Operation_Op1) isOperation_Op() {}

func (*Operation_Op2) isOperation_Op() {}

func (*Operation_Op3) isOperation_Op() {}

func (*Operation_Op4) isOperation_Op() {}

func (*Operation_Op5) isOperation_Op() {}

func (*Operation_Op6) isOperation_Op() {}

func (*Operation_Op7) isOperation_Op() {}

func (*Operation_Op8) isOperation_Op() {}

func (*Operation_Op9) isOperation_Op() {}

func (*Operation_Op10) isOperation_Op() {}

func (*Operation_Op13) isOperation_Op() {}

func (*Operation_Op14) isOperation_Op() {}

func (*Operation_Op16) isOperation_Op() {}

func (*Operation_Op17) isOperation_Op() {}

func (*Operation_Op18) isOperation_Op() {}

func (*Operation_Op19) isOperation_Op() {}

func (*Operation_Op20) isOperation_Op() {}

func (*Operation_Op21) isOperation_Op() {}

func (*Operation_Op22) isOperation_Op() {}

func (*Operation_Op23) isOperation_Op() {}

func (*Operation_Op24) isOperation_Op() {}

// transaction
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefBlockNum    uint32        `protobuf:"varint,1,opt,name=ref_block_num,json=refBlockNum,proto3" json:"ref_block_num,omitempty"`
	RefBlockPrefix uint32        `protobuf:"varint,2,opt,name=ref_block_prefix,json=refBlockPrefix,proto3" json:"ref_block_prefix,omitempty"`
	Expiration     *TimePointSec `protobuf:"bytes,3,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Operations     []*Operation  `protobuf:"bytes,4,rep,name=operations,proto3" json:"operations,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Transaction) GetRefBlockNum() uint32 {
	if x != nil {
		return x.RefBlockNum
	}
	return 0
}

func (x *Transaction) GetRefBlockPrefix() uint32 {
	if x != nil {
		return x.RefBlockPrefix
	}
	return 0
}

func (x *Transaction) GetExpiration() *TimePointSec {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *Transaction) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

type SignedTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trx       *Transaction   `protobuf:"bytes,1,opt,name=trx,proto3" json:"trx,omitempty"`
	Signature *SignatureType `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignedTransaction) Reset() {
	*x = SignedTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedTransaction) ProtoMessage() {}

func (x *SignedTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedTransaction.ProtoReflect.Descriptor instead.
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *SignedTransaction) GetTrx() *Transaction {
	if x != nil {
		return x.Trx
	}
	return nil
}

func (x *SignedTransaction) GetSignature() *SignatureType {
	if x != nil {
		return x.Signature
	}
	return nil
}

type OperationReceiptWithInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	GasUsage  uint64 `protobuf:"varint,2,opt,name=gas_usage,json=gasUsage,proto3" json:"gas_usage,omitempty"`
	VmConsole string `protobuf:"bytes,3,opt,name=vm_console,json=vmConsole,proto3" json:"vm_console,omitempty"`
}

func (x *OperationReceiptWithInfo) Reset() {
	*x = OperationReceiptWithInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationReceiptWithInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationReceiptWithInfo) ProtoMessage() {}

func (x *OperationReceiptWithInfo) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationReceiptWithInfo.ProtoReflect.Descriptor instead.
func (*OperationReceiptWithInfo) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *OperationReceiptWithInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OperationReceiptWithInfo) GetGasUsage() uint64 {
	if x != nil {
		return x.GasUsage
	}
	return 0
}

func (x *OperationReceiptWithInfo) GetVmConsole() string {
	if x != nil {
		return x.VmConsole
	}
	return ""
}

type TransactionReceiptWithInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    uint32                      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	NetUsage  uint64                      `protobuf:"varint,2,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	CpuUsage  uint64                      `protobuf:"varint,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	ErrorInfo string                      `protobuf:"bytes,4,opt,name=error_info,json=errorInfo,proto3" json:"error_info,omitempty"`
	OpResults []*OperationReceiptWithInfo `protobuf:"bytes,5,rep,name=op_results,json=opResults,proto3" json:"op_results,omitempty"`
}

func (x *TransactionReceiptWithInfo) Reset() {
	*x = TransactionReceiptWithInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceiptWithInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceiptWithInfo) ProtoMessage() {}

func (x *TransactionReceiptWithInfo) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceiptWithInfo.ProtoReflect.Descriptor instead.
func (*TransactionReceiptWithInfo) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionReceiptWithInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionReceiptWithInfo) GetNetUsage() uint64 {
	if x != nil {
		return x.NetUsage
	}
	return 0
}

func (x *TransactionReceiptWithInfo) GetCpuUsage() uint64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *TransactionReceiptWithInfo) GetErrorInfo() string {
	if x != nil {
		return x.ErrorInfo
	}
	return ""
}

func (x *TransactionReceiptWithInfo) GetOpResults() []*OperationReceiptWithInfo {
	if x != nil {
		return x.OpResults
	}
	return nil
}

type TransactionWrapperWithInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigTrx  *SignedTransaction          `protobuf:"bytes,1,opt,name=sig_trx,json=sigTrx,proto3" json:"sig_trx,omitempty"`
	Receipt *TransactionReceiptWithInfo `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *TransactionWrapperWithInfo) Reset() {
	*x = TransactionWrapperWithInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionWrapperWithInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionWrapperWithInfo) ProtoMessage() {}

func (x *TransactionWrapperWithInfo) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionWrapperWithInfo.ProtoReflect.Descriptor instead.
func (*TransactionWrapperWithInfo) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionWrapperWithInfo) GetSigTrx() *SignedTransaction {
	if x != nil {
		return x.SigTrx
	}
	return nil
}

func (x *TransactionWrapperWithInfo) GetReceipt() *TransactionReceiptWithInfo {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   uint32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	NetUsage uint64 `protobuf:"varint,2,opt,name=net_usage,json=netUsage,proto3" json:"net_usage,omitempty"`
	CpuUsage uint64 `protobuf:"varint,3,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *TransactionReceipt) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *TransactionReceipt) GetNetUsage() uint64 {
	if x != nil {
		return x.NetUsage
	}
	return 0
}

func (x *TransactionReceipt) GetCpuUsage() uint64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

type TransactionWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SigTrx  *SignedTransaction  `protobuf:"bytes,1,opt,name=sig_trx,json=sigTrx,proto3" json:"sig_trx,omitempty"`
	Receipt *TransactionReceipt `protobuf:"bytes,2,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *TransactionWrapper) Reset() {
	*x = TransactionWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionWrapper) ProtoMessage() {}

func (x *TransactionWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionWrapper.ProtoReflect.Descriptor instead.
func (*TransactionWrapper) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionWrapper) GetSigTrx() *SignedTransaction {
	if x != nil {
		return x.SigTrx
	}
	return nil
}

func (x *TransactionWrapper) GetReceipt() *TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

// block
type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previous              *Sha256       `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	Timestamp             *TimePointSec `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	BlockProducer         *AccountName  `protobuf:"bytes,3,opt,name=block_producer,json=blockProducer,proto3" json:"block_producer,omitempty"`
	TransactionMerkleRoot *Sha256       `protobuf:"bytes,4,opt,name=transaction_merkle_root,json=transactionMerkleRoot,proto3" json:"transaction_merkle_root,omitempty"`
	PrevApplyHash         uint64        `protobuf:"varint,5,opt,name=prev_apply_hash,json=prevApplyHash,proto3" json:"prev_apply_hash,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *BlockHeader) GetPrevious() *Sha256 {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *BlockHeader) GetTimestamp() *TimePointSec {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BlockHeader) GetBlockProducer() *AccountName {
	if x != nil {
		return x.BlockProducer
	}
	return nil
}

func (x *BlockHeader) GetTransactionMerkleRoot() *Sha256 {
	if x != nil {
		return x.TransactionMerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetPrevApplyHash() uint64 {
	if x != nil {
		return x.PrevApplyHash
	}
	return 0
}

type SignedBlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header                 *BlockHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BlockProducerSignature *SignatureType `protobuf:"bytes,2,opt,name=block_producer_signature,json=blockProducerSignature,proto3" json:"block_producer_signature,omitempty"`
}

func (x *SignedBlockHeader) Reset() {
	*x = SignedBlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlockHeader) ProtoMessage() {}

func (x *SignedBlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlockHeader.ProtoReflect.Descriptor instead.
func (*SignedBlockHeader) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *SignedBlockHeader) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SignedBlockHeader) GetBlockProducerSignature() *SignatureType {
	if x != nil {
		return x.BlockProducerSignature
	}
	return nil
}

type SignedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedHeader *SignedBlockHeader    `protobuf:"bytes,1,opt,name=signed_header,json=signedHeader,proto3" json:"signed_header,omitempty"`
	Transactions []*TransactionWrapper `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *SignedBlock) Reset() {
	*x = SignedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedBlock) ProtoMessage() {}

func (x *SignedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedBlock.ProtoReflect.Descriptor instead.
func (*SignedBlock) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *SignedBlock) GetSignedHeader() *SignedBlockHeader {
	if x != nil {
		return x.SignedHeader
	}
	return nil
}

func (x *SignedBlock) GetTransactions() []*TransactionWrapper {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type EmptySignedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedHeader *SignedBlockHeader `protobuf:"bytes,1,opt,name=signed_header,json=signedHeader,proto3" json:"signed_header,omitempty"`
	TrxCount     uint32             `protobuf:"varint,2,opt,name=trx_count,json=trxCount,proto3" json:"trx_count,omitempty"`
}

func (x *EmptySignedBlock) Reset() {
	*x = EmptySignedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prototype_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptySignedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySignedBlock) ProtoMessage() {}

func (x *EmptySignedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_prototype_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySignedBlock.ProtoReflect.Descriptor instead.
func (*EmptySignedBlock) Descriptor() ([]byte, []int) {
	return file_prototype_transaction_proto_rawDescGZIP(), []int{11}
}

func (x *EmptySignedBlock) GetSignedHeader() *SignedBlockHeader {
	if x != nil {
		return x.SignedHeader
	}
	return nil
}

func (x *EmptySignedBlock) GetTrxCount() uint32 {
	if x != nil {
		return x.TrxCount
	}
	return 0
}

var File_prototype_transaction_proto protoreflect.FileDescriptor

var file_prototype_transaction_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x09, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x03, 0x6f, 0x70, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x31,
	0x12, 0x31, 0x0a, 0x03, 0x6f, 0x70, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x70, 0x32, 0x12, 0x34, 0x0a, 0x03, 0x6f, 0x70, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x70, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x33, 0x12, 0x32, 0x0a, 0x03, 0x6f, 0x70, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x62, 0x70, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x34, 0x12, 0x30, 0x0a,
	0x03, 0x6f, 0x70, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x70, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x35, 0x12,
	0x2d, 0x0a, 0x03, 0x6f, 0x70, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x36, 0x12, 0x2e,
	0x0a, 0x03, 0x6f, 0x70, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x37, 0x12, 0x2f,
	0x0a, 0x03, 0x6f, 0x70, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x38, 0x12,
	0x2d, 0x0a, 0x03, 0x6f, 0x70, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x70, 0x39, 0x12, 0x3b,
	0x0a, 0x04, 0x6f, 0x70, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x31, 0x30, 0x12, 0x3a, 0x0a, 0x04, 0x6f,
	0x70, 0x31, 0x33, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x04, 0x6f, 0x70, 0x31, 0x33, 0x12, 0x39, 0x0a, 0x04, 0x6f, 0x70, 0x31, 0x34, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70,
	0x31, 0x34, 0x12, 0x37, 0x0a, 0x04, 0x6f, 0x70, 0x31, 0x36, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x31, 0x36, 0x12, 0x30, 0x0a, 0x04, 0x6f,
	0x70, 0x31, 0x37, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x31, 0x37, 0x12, 0x33, 0x0a,
	0x04, 0x6f, 0x70, 0x31, 0x38, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70,
	0x31, 0x38, 0x12, 0x34, 0x0a, 0x04, 0x6f, 0x70, 0x31, 0x39, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x70, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x31, 0x39, 0x12, 0x39, 0x0a, 0x04, 0x6f, 0x70, 0x32, 0x30,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f,
	0x70, 0x32, 0x30, 0x12, 0x39, 0x0a, 0x04, 0x6f, 0x70, 0x32, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x32, 0x31, 0x12, 0x39,
	0x0a, 0x04, 0x6f, 0x70, 0x32, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x79,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x32, 0x32, 0x12, 0x38, 0x0a, 0x04, 0x6f, 0x70, 0x32,
	0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x73,
	0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f,
	0x70, 0x32, 0x33, 0x12, 0x3b, 0x0a, 0x04, 0x6f, 0x70, 0x32, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x75, 0x6e,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x32, 0x34,
	0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x74,
	0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x74, 0x72, 0x78, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x71,
	0x0a, 0x1b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x22, 0xd7, 0x01, 0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x6e, 0x65, 0x74, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x1d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a,
	0x07, 0x73, 0x69, 0x67, 0x5f, 0x74, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73,
	0x69, 0x67, 0x54, 0x72, 0x78, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x67, 0x0a, 0x13, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x74, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x69,
	0x67, 0x5f, 0x74, 0x72, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x69, 0x67, 0x54,
	0x72, 0x78, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xa9, 0x02, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x32,
	0x35, 0x36, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x52, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x73, 0x68, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x53, 0x0a, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x16,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x76, 0x0a, 0x12, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x43, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x72, 0x78, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x74, 0x72, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x50, 0x0a, 0x22, 0x69, 0x6f, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x2e, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x6f, 0x73, 0x2d, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_prototype_transaction_proto_rawDescOnce sync.Once
	file_prototype_transaction_proto_rawDescData = file_prototype_transaction_proto_rawDesc
)

func file_prototype_transaction_proto_rawDescGZIP() []byte {
	file_prototype_transaction_proto_rawDescOnce.Do(func() {
		file_prototype_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_prototype_transaction_proto_rawDescData)
	})
	return file_prototype_transaction_proto_rawDescData
}

var file_prototype_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_prototype_transaction_proto_goTypes = []interface{}{
	(*Operation)(nil),                  // 0: prototype.operation
	(*Transaction)(nil),                // 1: prototype.transaction
	(*SignedTransaction)(nil),          // 2: prototype.signed_transaction
	(*OperationReceiptWithInfo)(nil),   // 3: prototype.operation_receipt_with_info
	(*TransactionReceiptWithInfo)(nil), // 4: prototype.transaction_receipt_with_info
	(*TransactionWrapperWithInfo)(nil), // 5: prototype.transaction_wrapper_with_info
	(*TransactionReceipt)(nil),         // 6: prototype.transaction_receipt
	(*TransactionWrapper)(nil),         // 7: prototype.transaction_wrapper
	(*BlockHeader)(nil),                // 8: prototype.block_header
	(*SignedBlockHeader)(nil),          // 9: prototype.signed_block_header
	(*SignedBlock)(nil),                // 10: prototype.signed_block
	(*EmptySignedBlock)(nil),           // 11: prototype.empty_signed_block
	(*AccountCreateOperation)(nil),     // 12: prototype.account_create_operation
	(*TransferOperation)(nil),          // 13: prototype.transfer_operation
	(*BpRegisterOperation)(nil),        // 14: prototype.bp_register_operation
	(*BpEnableOperation)(nil),          // 15: prototype.bp_enable_operation
	(*BpVoteOperation)(nil),            // 16: prototype.bp_vote_operation
	(*PostOperation)(nil),              // 17: prototype.post_operation
	(*ReplyOperation)(nil),             // 18: prototype.reply_operation
	(*FollowOperation)(nil),            // 19: prototype.follow_operation
	(*VoteOperation)(nil),              // 20: prototype.vote_operation
	(*TransferToVestOperation)(nil),    // 21: prototype.transfer_to_vest_operation
	(*ContractDeployOperation)(nil),    // 22: prototype.contract_deploy_operation
	(*ContractApplyOperation)(nil),     // 23: prototype.contract_apply_operation
	(*ConvertVestOperation)(nil),       // 24: prototype.convert_vest_operation
	(*StakeOperation)(nil),             // 25: prototype.stake_operation
	(*UnStakeOperation)(nil),           // 26: prototype.un_stake_operation
	(*BpUpdateOperation)(nil),          // 27: prototype.bp_update_operation
	(*AccountUpdateOperation)(nil),     // 28: prototype.account_update_operation
	(*AcquireTicketOperation)(nil),     // 29: prototype.acquire_ticket_operation
	(*VoteByTicketOperation)(nil),      // 30: prototype.vote_by_ticket_operation
	(*DelegateVestOperation)(nil),      // 31: prototype.delegate_vest_operation
	(*UnDelegateVestOperation)(nil),    // 32: prototype.un_delegate_vest_operation
	(*TimePointSec)(nil),               // 33: prototype.time_point_sec
	(*SignatureType)(nil),              // 34: prototype.signature_type
	(*Sha256)(nil),                     // 35: prototype.sha256
	(*AccountName)(nil),                // 36: prototype.account_name
}
var file_prototype_transaction_proto_depIdxs = []int32{
	12, // 0: prototype.operation.op1:type_name -> prototype.account_create_operation
	13, // 1: prototype.operation.op2:type_name -> prototype.transfer_operation
	14, // 2: prototype.operation.op3:type_name -> prototype.bp_register_operation
	15, // 3: prototype.operation.op4:type_name -> prototype.bp_enable_operation
	16, // 4: prototype.operation.op5:type_name -> prototype.bp_vote_operation
	17, // 5: prototype.operation.op6:type_name -> prototype.post_operation
	18, // 6: prototype.operation.op7:type_name -> prototype.reply_operation
	19, // 7: prototype.operation.op8:type_name -> prototype.follow_operation
	20, // 8: prototype.operation.op9:type_name -> prototype.vote_operation
	21, // 9: prototype.operation.op10:type_name -> prototype.transfer_to_vest_operation
	22, // 10: prototype.operation.op13:type_name -> prototype.contract_deploy_operation
	23, // 11: prototype.operation.op14:type_name -> prototype.contract_apply_operation
	24, // 12: prototype.operation.op16:type_name -> prototype.convert_vest_operation
	25, // 13: prototype.operation.op17:type_name -> prototype.stake_operation
	26, // 14: prototype.operation.op18:type_name -> prototype.un_stake_operation
	27, // 15: prototype.operation.op19:type_name -> prototype.bp_update_operation
	28, // 16: prototype.operation.op20:type_name -> prototype.account_update_operation
	29, // 17: prototype.operation.op21:type_name -> prototype.acquire_ticket_operation
	30, // 18: prototype.operation.op22:type_name -> prototype.vote_by_ticket_operation
	31, // 19: prototype.operation.op23:type_name -> prototype.delegate_vest_operation
	32, // 20: prototype.operation.op24:type_name -> prototype.un_delegate_vest_operation
	33, // 21: prototype.transaction.expiration:type_name -> prototype.time_point_sec
	0,  // 22: prototype.transaction.operations:type_name -> prototype.operation
	1,  // 23: prototype.signed_transaction.trx:type_name -> prototype.transaction
	34, // 24: prototype.signed_transaction.signature:type_name -> prototype.signature_type
	3,  // 25: prototype.transaction_receipt_with_info.op_results:type_name -> prototype.operation_receipt_with_info
	2,  // 26: prototype.transaction_wrapper_with_info.sig_trx:type_name -> prototype.signed_transaction
	4,  // 27: prototype.transaction_wrapper_with_info.receipt:type_name -> prototype.transaction_receipt_with_info
	2,  // 28: prototype.transaction_wrapper.sig_trx:type_name -> prototype.signed_transaction
	6,  // 29: prototype.transaction_wrapper.receipt:type_name -> prototype.transaction_receipt
	35, // 30: prototype.block_header.previous:type_name -> prototype.sha256
	33, // 31: prototype.block_header.timestamp:type_name -> prototype.time_point_sec
	36, // 32: prototype.block_header.block_producer:type_name -> prototype.account_name
	35, // 33: prototype.block_header.transaction_merkle_root:type_name -> prototype.sha256
	8,  // 34: prototype.signed_block_header.header:type_name -> prototype.block_header
	34, // 35: prototype.signed_block_header.block_producer_signature:type_name -> prototype.signature_type
	9,  // 36: prototype.signed_block.signed_header:type_name -> prototype.signed_block_header
	7,  // 37: prototype.signed_block.transactions:type_name -> prototype.transaction_wrapper
	9,  // 38: prototype.empty_signed_block.signed_header:type_name -> prototype.signed_block_header
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_prototype_transaction_proto_init() }
func file_prototype_transaction_proto_init() {
	if File_prototype_transaction_proto != nil {
		return
	}
	file_prototype_type_proto_init()
	file_prototype_operation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_prototype_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationReceiptWithInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceiptWithInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionWrapperWithInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prototype_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptySignedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prototype_transaction_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Operation_Op1)(nil),
		(*Operation_Op2)(nil),
		(*Operation_Op3)(nil),
		(*Operation_Op4)(nil),
		(*Operation_Op5)(nil),
		(*Operation_Op6)(nil),
		(*Operation_Op7)(nil),
		(*Operation_Op8)(nil),
		(*Operation_Op9)(nil),
		(*Operation_Op10)(nil),
		(*Operation_Op13)(nil),
		(*Operation_Op14)(nil),
		(*Operation_Op16)(nil),
		(*Operation_Op17)(nil),
		(*Operation_Op18)(nil),
		(*Operation_Op19)(nil),
		(*Operation_Op20)(nil),
		(*Operation_Op21)(nil),
		(*Operation_Op22)(nil),
		(*Operation_Op23)(nil),
		(*Operation_Op24)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prototype_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prototype_transaction_proto_goTypes,
		DependencyIndexes: file_prototype_transaction_proto_depIdxs,
		MessageInfos:      file_prototype_transaction_proto_msgTypes,
	}.Build()
	File_prototype_transaction_proto = out.File
	file_prototype_transaction_proto_rawDesc = nil
	file_prototype_transaction_proto_goTypes = nil
	file_prototype_transaction_proto_depIdxs = nil
}
