// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.pb.go

// Package mock_grpcpb is a generated GoMock package.
package mock_grpcpb

import (
	context "context"
	pb "github.com/coschain/contentos-go/rpc/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockApiServiceClient is a mock of ApiServiceClient interface
type MockApiServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiServiceClientMockRecorder
}

// MockApiServiceClientMockRecorder is the mock recorder for MockApiServiceClient
type MockApiServiceClientMockRecorder struct {
	mock *MockApiServiceClient
}

// NewMockApiServiceClient creates a new mock instance
func NewMockApiServiceClient(ctrl *gomock.Controller) *MockApiServiceClient {
	mock := &MockApiServiceClient{ctrl: ctrl}
	mock.recorder = &MockApiServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiServiceClient) EXPECT() *MockApiServiceClientMockRecorder {
	return m.recorder
}

// QueryTableContent mocks base method
func (m *MockApiServiceClient) QueryTableContent(ctx context.Context, in *pb.GetTableContentRequest, opts ...grpc.CallOption) (*pb.TableContentResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryTableContent", varargs...)
	ret0, _ := ret[0].(*pb.TableContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTableContent indicates an expected call of QueryTableContent
func (mr *MockApiServiceClientMockRecorder) QueryTableContent(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTableContent", reflect.TypeOf((*MockApiServiceClient)(nil).QueryTableContent), varargs...)
}

// GetAccountByName mocks base method
func (m *MockApiServiceClient) GetAccountByName(ctx context.Context, in *pb.GetAccountByNameRequest, opts ...grpc.CallOption) (*pb.AccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountByName", varargs...)
	ret0, _ := ret[0].(*pb.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByName indicates an expected call of GetAccountByName
func (mr *MockApiServiceClientMockRecorder) GetAccountByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByName", reflect.TypeOf((*MockApiServiceClient)(nil).GetAccountByName), varargs...)
}

// GetFollowerListByName mocks base method
func (m *MockApiServiceClient) GetFollowerListByName(ctx context.Context, in *pb.GetFollowerListByNameRequest, opts ...grpc.CallOption) (*pb.GetFollowerListByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowerListByName", varargs...)
	ret0, _ := ret[0].(*pb.GetFollowerListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerListByName indicates an expected call of GetFollowerListByName
func (mr *MockApiServiceClientMockRecorder) GetFollowerListByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerListByName", reflect.TypeOf((*MockApiServiceClient)(nil).GetFollowerListByName), varargs...)
}

// GetFollowingListByName mocks base method
func (m *MockApiServiceClient) GetFollowingListByName(ctx context.Context, in *pb.GetFollowingListByNameRequest, opts ...grpc.CallOption) (*pb.GetFollowingListByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowingListByName", varargs...)
	ret0, _ := ret[0].(*pb.GetFollowingListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingListByName indicates an expected call of GetFollowingListByName
func (mr *MockApiServiceClientMockRecorder) GetFollowingListByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingListByName", reflect.TypeOf((*MockApiServiceClient)(nil).GetFollowingListByName), varargs...)
}

// GetFollowCountByName mocks base method
func (m *MockApiServiceClient) GetFollowCountByName(ctx context.Context, in *pb.GetFollowCountByNameRequest, opts ...grpc.CallOption) (*pb.GetFollowCountByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFollowCountByName", varargs...)
	ret0, _ := ret[0].(*pb.GetFollowCountByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowCountByName indicates an expected call of GetFollowCountByName
func (mr *MockApiServiceClientMockRecorder) GetFollowCountByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowCountByName", reflect.TypeOf((*MockApiServiceClient)(nil).GetFollowCountByName), varargs...)
}

// GetBlockProducerList mocks base method
func (m *MockApiServiceClient) GetBlockProducerList(ctx context.Context, in *pb.GetBlockProducerListRequest, opts ...grpc.CallOption) (*pb.GetBlockProducerListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockProducerList", varargs...)
	ret0, _ := ret[0].(*pb.GetBlockProducerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerList indicates an expected call of GetBlockProducerList
func (mr *MockApiServiceClientMockRecorder) GetBlockProducerList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerList", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockProducerList), varargs...)
}

// GetPostListByCreated mocks base method
func (m *MockApiServiceClient) GetPostListByCreated(ctx context.Context, in *pb.GetPostListByCreatedRequest, opts ...grpc.CallOption) (*pb.GetPostListByCreatedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostListByCreated", varargs...)
	ret0, _ := ret[0].(*pb.GetPostListByCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByCreated indicates an expected call of GetPostListByCreated
func (mr *MockApiServiceClientMockRecorder) GetPostListByCreated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByCreated", reflect.TypeOf((*MockApiServiceClient)(nil).GetPostListByCreated), varargs...)
}

// GetReplyListByPostId mocks base method
func (m *MockApiServiceClient) GetReplyListByPostId(ctx context.Context, in *pb.GetReplyListByPostIdRequest, opts ...grpc.CallOption) (*pb.GetReplyListByPostIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetReplyListByPostId", varargs...)
	ret0, _ := ret[0].(*pb.GetReplyListByPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplyListByPostId indicates an expected call of GetReplyListByPostId
func (mr *MockApiServiceClientMockRecorder) GetReplyListByPostId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplyListByPostId", reflect.TypeOf((*MockApiServiceClient)(nil).GetReplyListByPostId), varargs...)
}

// GetBlockTransactionsByNum mocks base method
func (m *MockApiServiceClient) GetBlockTransactionsByNum(ctx context.Context, in *pb.GetBlockTransactionsByNumRequest, opts ...grpc.CallOption) (*pb.GetBlockTransactionsByNumResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockTransactionsByNum", varargs...)
	ret0, _ := ret[0].(*pb.GetBlockTransactionsByNumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionsByNum indicates an expected call of GetBlockTransactionsByNum
func (mr *MockApiServiceClientMockRecorder) GetBlockTransactionsByNum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionsByNum", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockTransactionsByNum), varargs...)
}

// GetChainState mocks base method
func (m *MockApiServiceClient) GetChainState(ctx context.Context, in *pb.NonParamsRequest, opts ...grpc.CallOption) (*pb.GetChainStateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChainState", varargs...)
	ret0, _ := ret[0].(*pb.GetChainStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainState indicates an expected call of GetChainState
func (mr *MockApiServiceClientMockRecorder) GetChainState(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainState", reflect.TypeOf((*MockApiServiceClient)(nil).GetChainState), varargs...)
}

// BroadcastTrx mocks base method
func (m *MockApiServiceClient) BroadcastTrx(ctx context.Context, in *pb.BroadcastTrxRequest, opts ...grpc.CallOption) (*pb.BroadcastTrxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BroadcastTrx", varargs...)
	ret0, _ := ret[0].(*pb.BroadcastTrxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTrx indicates an expected call of BroadcastTrx
func (mr *MockApiServiceClientMockRecorder) BroadcastTrx(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTrx", reflect.TypeOf((*MockApiServiceClient)(nil).BroadcastTrx), varargs...)
}

// GetBlockList mocks base method
func (m *MockApiServiceClient) GetBlockList(ctx context.Context, in *pb.GetBlockListRequest, opts ...grpc.CallOption) (*pb.GetBlockListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockList", varargs...)
	ret0, _ := ret[0].(*pb.GetBlockListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockList indicates an expected call of GetBlockList
func (mr *MockApiServiceClientMockRecorder) GetBlockList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockList", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockList), varargs...)
}

// GetSignedBlock mocks base method
func (m *MockApiServiceClient) GetSignedBlock(ctx context.Context, in *pb.GetSignedBlockRequest, opts ...grpc.CallOption) (*pb.GetSignedBlockResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSignedBlock", varargs...)
	ret0, _ := ret[0].(*pb.GetSignedBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedBlock indicates an expected call of GetSignedBlock
func (mr *MockApiServiceClientMockRecorder) GetSignedBlock(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedBlock", reflect.TypeOf((*MockApiServiceClient)(nil).GetSignedBlock), varargs...)
}

// GetAccountListByBalance mocks base method
func (m *MockApiServiceClient) GetAccountListByBalance(ctx context.Context, in *pb.GetAccountListByBalanceRequest, opts ...grpc.CallOption) (*pb.GetAccountListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountListByBalance", varargs...)
	ret0, _ := ret[0].(*pb.GetAccountListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByBalance indicates an expected call of GetAccountListByBalance
func (mr *MockApiServiceClientMockRecorder) GetAccountListByBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByBalance", reflect.TypeOf((*MockApiServiceClient)(nil).GetAccountListByBalance), varargs...)
}

// GetDailyTotalTrxInfo mocks base method
func (m *MockApiServiceClient) GetDailyTotalTrxInfo(ctx context.Context, in *pb.GetDailyTotalTrxRequest, opts ...grpc.CallOption) (*pb.GetDailyTotalTrxResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDailyTotalTrxInfo", varargs...)
	ret0, _ := ret[0].(*pb.GetDailyTotalTrxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyTotalTrxInfo indicates an expected call of GetDailyTotalTrxInfo
func (mr *MockApiServiceClientMockRecorder) GetDailyTotalTrxInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyTotalTrxInfo", reflect.TypeOf((*MockApiServiceClient)(nil).GetDailyTotalTrxInfo), varargs...)
}

// GetTrxInfoById mocks base method
func (m *MockApiServiceClient) GetTrxInfoById(ctx context.Context, in *pb.GetTrxInfoByIdRequest, opts ...grpc.CallOption) (*pb.GetTrxInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrxInfoById", varargs...)
	ret0, _ := ret[0].(*pb.GetTrxInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxInfoById indicates an expected call of GetTrxInfoById
func (mr *MockApiServiceClientMockRecorder) GetTrxInfoById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxInfoById", reflect.TypeOf((*MockApiServiceClient)(nil).GetTrxInfoById), varargs...)
}

// GetTrxListByTime mocks base method
func (m *MockApiServiceClient) GetTrxListByTime(ctx context.Context, in *pb.GetTrxListByTimeRequest, opts ...grpc.CallOption) (*pb.GetTrxListByTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTrxListByTime", varargs...)
	ret0, _ := ret[0].(*pb.GetTrxListByTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxListByTime indicates an expected call of GetTrxListByTime
func (mr *MockApiServiceClientMockRecorder) GetTrxListByTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxListByTime", reflect.TypeOf((*MockApiServiceClient)(nil).GetTrxListByTime), varargs...)
}

// GetPostListByCreateTime mocks base method
func (m *MockApiServiceClient) GetPostListByCreateTime(ctx context.Context, in *pb.GetPostListByCreateTimeRequest, opts ...grpc.CallOption) (*pb.GetPostListByCreateTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostListByCreateTime", varargs...)
	ret0, _ := ret[0].(*pb.GetPostListByCreateTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByCreateTime indicates an expected call of GetPostListByCreateTime
func (mr *MockApiServiceClientMockRecorder) GetPostListByCreateTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByCreateTime", reflect.TypeOf((*MockApiServiceClient)(nil).GetPostListByCreateTime), varargs...)
}

// GetPostListByName mocks base method
func (m *MockApiServiceClient) GetPostListByName(ctx context.Context, in *pb.GetPostListByNameRequest, opts ...grpc.CallOption) (*pb.GetPostListByCreateTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostListByName", varargs...)
	ret0, _ := ret[0].(*pb.GetPostListByCreateTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByName indicates an expected call of GetPostListByName
func (mr *MockApiServiceClientMockRecorder) GetPostListByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByName", reflect.TypeOf((*MockApiServiceClient)(nil).GetPostListByName), varargs...)
}

// TrxStatByHour mocks base method
func (m *MockApiServiceClient) TrxStatByHour(ctx context.Context, in *pb.TrxStatByHourRequest, opts ...grpc.CallOption) (*pb.TrxStatByHourResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TrxStatByHour", varargs...)
	ret0, _ := ret[0].(*pb.TrxStatByHourResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrxStatByHour indicates an expected call of TrxStatByHour
func (mr *MockApiServiceClientMockRecorder) TrxStatByHour(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrxStatByHour", reflect.TypeOf((*MockApiServiceClient)(nil).TrxStatByHour), varargs...)
}

// GetUserTrxListByTime mocks base method
func (m *MockApiServiceClient) GetUserTrxListByTime(ctx context.Context, in *pb.GetUserTrxListByTimeRequest, opts ...grpc.CallOption) (*pb.GetUserTrxListByTimeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserTrxListByTime", varargs...)
	ret0, _ := ret[0].(*pb.GetUserTrxListByTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTrxListByTime indicates an expected call of GetUserTrxListByTime
func (mr *MockApiServiceClientMockRecorder) GetUserTrxListByTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTrxListByTime", reflect.TypeOf((*MockApiServiceClient)(nil).GetUserTrxListByTime), varargs...)
}

// GetPostInfoById mocks base method
func (m *MockApiServiceClient) GetPostInfoById(ctx context.Context, in *pb.GetPostInfoByIdRequest, opts ...grpc.CallOption) (*pb.GetPostInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostInfoById", varargs...)
	ret0, _ := ret[0].(*pb.GetPostInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostInfoById indicates an expected call of GetPostInfoById
func (mr *MockApiServiceClientMockRecorder) GetPostInfoById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostInfoById", reflect.TypeOf((*MockApiServiceClient)(nil).GetPostInfoById), varargs...)
}

// GetContractInfo mocks base method
func (m *MockApiServiceClient) GetContractInfo(ctx context.Context, in *pb.GetContractInfoRequest, opts ...grpc.CallOption) (*pb.GetContractInfoResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractInfo", varargs...)
	ret0, _ := ret[0].(*pb.GetContractInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractInfo indicates an expected call of GetContractInfo
func (mr *MockApiServiceClientMockRecorder) GetContractInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfo", reflect.TypeOf((*MockApiServiceClient)(nil).GetContractInfo), varargs...)
}

// GetBlkIsIrreversibleByTxId mocks base method
func (m *MockApiServiceClient) GetBlkIsIrreversibleByTxId(ctx context.Context, in *pb.GetBlkIsIrreversibleByTxIdRequest, opts ...grpc.CallOption) (*pb.GetBlkIsIrreversibleByTxIdResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlkIsIrreversibleByTxId", varargs...)
	ret0, _ := ret[0].(*pb.GetBlkIsIrreversibleByTxIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlkIsIrreversibleByTxId indicates an expected call of GetBlkIsIrreversibleByTxId
func (mr *MockApiServiceClientMockRecorder) GetBlkIsIrreversibleByTxId(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlkIsIrreversibleByTxId", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlkIsIrreversibleByTxId), varargs...)
}

// GetAccountListByCreTime mocks base method
func (m *MockApiServiceClient) GetAccountListByCreTime(ctx context.Context, in *pb.GetAccountListByCreTimeRequest, opts ...grpc.CallOption) (*pb.GetAccountListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountListByCreTime", varargs...)
	ret0, _ := ret[0].(*pb.GetAccountListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByCreTime indicates an expected call of GetAccountListByCreTime
func (mr *MockApiServiceClientMockRecorder) GetAccountListByCreTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByCreTime", reflect.TypeOf((*MockApiServiceClient)(nil).GetAccountListByCreTime), varargs...)
}

// GetDailyStats mocks base method
func (m *MockApiServiceClient) GetDailyStats(ctx context.Context, in *pb.GetDailyStatsRequest, opts ...grpc.CallOption) (*pb.GetDailyStatsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDailyStats", varargs...)
	ret0, _ := ret[0].(*pb.GetDailyStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyStats indicates an expected call of GetDailyStats
func (mr *MockApiServiceClientMockRecorder) GetDailyStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyStats", reflect.TypeOf((*MockApiServiceClient)(nil).GetDailyStats), varargs...)
}

// GetMonthlyStats mocks base method
func (m *MockApiServiceClient) GetMonthlyStats(ctx context.Context, in *pb.GetMonthlysRequest, opts ...grpc.CallOption) (*pb.GetMonthlysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMonthlyStats", varargs...)
	ret0, _ := ret[0].(*pb.GetMonthlysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyStats indicates an expected call of GetMonthlyStats
func (mr *MockApiServiceClientMockRecorder) GetMonthlyStats(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyStats", reflect.TypeOf((*MockApiServiceClient)(nil).GetMonthlyStats), varargs...)
}

// GetContractListByTime mocks base method
func (m *MockApiServiceClient) GetContractListByTime(ctx context.Context, in *pb.GetContractListByTimeRequest, opts ...grpc.CallOption) (*pb.GetContractListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractListByTime", varargs...)
	ret0, _ := ret[0].(*pb.GetContractListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractListByTime indicates an expected call of GetContractListByTime
func (mr *MockApiServiceClientMockRecorder) GetContractListByTime(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractListByTime", reflect.TypeOf((*MockApiServiceClient)(nil).GetContractListByTime), varargs...)
}

// GetBlockProducerListByVoteCount mocks base method
func (m *MockApiServiceClient) GetBlockProducerListByVoteCount(ctx context.Context, in *pb.GetBlockProducerListByVoteCountRequest, opts ...grpc.CallOption) (*pb.GetBlockProducerListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockProducerListByVoteCount", varargs...)
	ret0, _ := ret[0].(*pb.GetBlockProducerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerListByVoteCount indicates an expected call of GetBlockProducerListByVoteCount
func (mr *MockApiServiceClientMockRecorder) GetBlockProducerListByVoteCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerListByVoteCount", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockProducerListByVoteCount), varargs...)
}

// GetPostListByVest mocks base method
func (m *MockApiServiceClient) GetPostListByVest(ctx context.Context, in *pb.GetPostListByVestRequest, opts ...grpc.CallOption) (*pb.GetPostListByVestResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPostListByVest", varargs...)
	ret0, _ := ret[0].(*pb.GetPostListByVestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByVest indicates an expected call of GetPostListByVest
func (mr *MockApiServiceClientMockRecorder) GetPostListByVest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByVest", reflect.TypeOf((*MockApiServiceClient)(nil).GetPostListByVest), varargs...)
}

// EstimateStamina mocks base method
func (m *MockApiServiceClient) EstimateStamina(ctx context.Context, in *pb.EsimateRequest, opts ...grpc.CallOption) (*pb.EsimateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateStamina", varargs...)
	ret0, _ := ret[0].(*pb.EsimateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateStamina indicates an expected call of EstimateStamina
func (mr *MockApiServiceClientMockRecorder) EstimateStamina(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateStamina", reflect.TypeOf((*MockApiServiceClient)(nil).EstimateStamina), varargs...)
}

// GetNodeNeighbours mocks base method
func (m *MockApiServiceClient) GetNodeNeighbours(ctx context.Context, in *pb.NonParamsRequest, opts ...grpc.CallOption) (*pb.GetNodeNeighboursResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeNeighbours", varargs...)
	ret0, _ := ret[0].(*pb.GetNodeNeighboursResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeNeighbours indicates an expected call of GetNodeNeighbours
func (mr *MockApiServiceClientMockRecorder) GetNodeNeighbours(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeNeighbours", reflect.TypeOf((*MockApiServiceClient)(nil).GetNodeNeighbours), varargs...)
}

// GetMyStakers mocks base method
func (m *MockApiServiceClient) GetMyStakers(ctx context.Context, in *pb.GetMyStakerListByNameRequest, opts ...grpc.CallOption) (*pb.GetMyStakerListByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMyStakers", varargs...)
	ret0, _ := ret[0].(*pb.GetMyStakerListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyStakers indicates an expected call of GetMyStakers
func (mr *MockApiServiceClientMockRecorder) GetMyStakers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyStakers", reflect.TypeOf((*MockApiServiceClient)(nil).GetMyStakers), varargs...)
}

// GetMyStakes mocks base method
func (m *MockApiServiceClient) GetMyStakes(ctx context.Context, in *pb.GetMyStakeListByNameRequest, opts ...grpc.CallOption) (*pb.GetMyStakeListByNameResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMyStakes", varargs...)
	ret0, _ := ret[0].(*pb.GetMyStakeListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyStakes indicates an expected call of GetMyStakes
func (mr *MockApiServiceClientMockRecorder) GetMyStakes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyStakes", reflect.TypeOf((*MockApiServiceClient)(nil).GetMyStakes), varargs...)
}

// GetNodeRunningVersion mocks base method
func (m *MockApiServiceClient) GetNodeRunningVersion(ctx context.Context, in *pb.NonParamsRequest, opts ...grpc.CallOption) (*pb.GetNodeRunningVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodeRunningVersion", varargs...)
	ret0, _ := ret[0].(*pb.GetNodeRunningVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeRunningVersion indicates an expected call of GetNodeRunningVersion
func (mr *MockApiServiceClientMockRecorder) GetNodeRunningVersion(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeRunningVersion", reflect.TypeOf((*MockApiServiceClient)(nil).GetNodeRunningVersion), varargs...)
}

// GetAccountListByVest mocks base method
func (m *MockApiServiceClient) GetAccountListByVest(ctx context.Context, in *pb.GetAccountListByVestRequest, opts ...grpc.CallOption) (*pb.GetAccountListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountListByVest", varargs...)
	ret0, _ := ret[0].(*pb.GetAccountListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByVest indicates an expected call of GetAccountListByVest
func (mr *MockApiServiceClientMockRecorder) GetAccountListByVest(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByVest", reflect.TypeOf((*MockApiServiceClient)(nil).GetAccountListByVest), varargs...)
}

// GetBlockProducerByName mocks base method
func (m *MockApiServiceClient) GetBlockProducerByName(ctx context.Context, in *pb.GetBlockProducerByNameRequest, opts ...grpc.CallOption) (*pb.BlockProducerResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockProducerByName", varargs...)
	ret0, _ := ret[0].(*pb.BlockProducerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerByName indicates an expected call of GetBlockProducerByName
func (mr *MockApiServiceClientMockRecorder) GetBlockProducerByName(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerByName", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockProducerByName), varargs...)
}

// GetAccountByPubKey mocks base method
func (m *MockApiServiceClient) GetAccountByPubKey(ctx context.Context, in *pb.GetAccountByPubKeyRequest, opts ...grpc.CallOption) (*pb.AccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountByPubKey", varargs...)
	ret0, _ := ret[0].(*pb.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByPubKey indicates an expected call of GetAccountByPubKey
func (mr *MockApiServiceClientMockRecorder) GetAccountByPubKey(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByPubKey", reflect.TypeOf((*MockApiServiceClient)(nil).GetAccountByPubKey), varargs...)
}

// GetBlockBFTInfoByNum mocks base method
func (m *MockApiServiceClient) GetBlockBFTInfoByNum(ctx context.Context, in *pb.GetBlockBFTInfoByNumRequest, opts ...grpc.CallOption) (*pb.GetBlockBFTInfoByNumResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockBFTInfoByNum", varargs...)
	ret0, _ := ret[0].(*pb.GetBlockBFTInfoByNumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockBFTInfoByNum indicates an expected call of GetBlockBFTInfoByNum
func (mr *MockApiServiceClientMockRecorder) GetBlockBFTInfoByNum(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockBFTInfoByNum", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockBFTInfoByNum), varargs...)
}

// GetAppTableRecord mocks base method
func (m *MockApiServiceClient) GetAppTableRecord(ctx context.Context, in *pb.GetAppTableRecordRequest, opts ...grpc.CallOption) (*pb.GetAppTableRecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAppTableRecord", varargs...)
	ret0, _ := ret[0].(*pb.GetAppTableRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppTableRecord indicates an expected call of GetAppTableRecord
func (mr *MockApiServiceClientMockRecorder) GetAppTableRecord(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppTableRecord", reflect.TypeOf((*MockApiServiceClient)(nil).GetAppTableRecord), varargs...)
}

// GetBlockProducerVoterList mocks base method
func (m *MockApiServiceClient) GetBlockProducerVoterList(ctx context.Context, in *pb.GetBlockProducerVoterListRequest, opts ...grpc.CallOption) (*pb.GetBlockProducerVoterListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBlockProducerVoterList", varargs...)
	ret0, _ := ret[0].(*pb.GetBlockProducerVoterListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerVoterList indicates an expected call of GetBlockProducerVoterList
func (mr *MockApiServiceClientMockRecorder) GetBlockProducerVoterList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerVoterList", reflect.TypeOf((*MockApiServiceClient)(nil).GetBlockProducerVoterList), varargs...)
}

// GetVestDelegationOrderList mocks base method
func (m *MockApiServiceClient) GetVestDelegationOrderList(ctx context.Context, in *pb.GetVestDelegationOrderListRequest, opts ...grpc.CallOption) (*pb.GetVestDelegationOrderListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVestDelegationOrderList", varargs...)
	ret0, _ := ret[0].(*pb.GetVestDelegationOrderListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVestDelegationOrderList indicates an expected call of GetVestDelegationOrderList
func (mr *MockApiServiceClientMockRecorder) GetVestDelegationOrderList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVestDelegationOrderList", reflect.TypeOf((*MockApiServiceClient)(nil).GetVestDelegationOrderList), varargs...)
}

// MockApiServiceServer is a mock of ApiServiceServer interface
type MockApiServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockApiServiceServerMockRecorder
}

// MockApiServiceServerMockRecorder is the mock recorder for MockApiServiceServer
type MockApiServiceServerMockRecorder struct {
	mock *MockApiServiceServer
}

// NewMockApiServiceServer creates a new mock instance
func NewMockApiServiceServer(ctrl *gomock.Controller) *MockApiServiceServer {
	mock := &MockApiServiceServer{ctrl: ctrl}
	mock.recorder = &MockApiServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApiServiceServer) EXPECT() *MockApiServiceServerMockRecorder {
	return m.recorder
}

// QueryTableContent mocks base method
func (m *MockApiServiceServer) QueryTableContent(arg0 context.Context, arg1 *pb.GetTableContentRequest) (*pb.TableContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTableContent", arg0, arg1)
	ret0, _ := ret[0].(*pb.TableContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTableContent indicates an expected call of QueryTableContent
func (mr *MockApiServiceServerMockRecorder) QueryTableContent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTableContent", reflect.TypeOf((*MockApiServiceServer)(nil).QueryTableContent), arg0, arg1)
}

// GetAccountByName mocks base method
func (m *MockApiServiceServer) GetAccountByName(arg0 context.Context, arg1 *pb.GetAccountByNameRequest) (*pb.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByName indicates an expected call of GetAccountByName
func (mr *MockApiServiceServerMockRecorder) GetAccountByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByName", reflect.TypeOf((*MockApiServiceServer)(nil).GetAccountByName), arg0, arg1)
}

// GetFollowerListByName mocks base method
func (m *MockApiServiceServer) GetFollowerListByName(arg0 context.Context, arg1 *pb.GetFollowerListByNameRequest) (*pb.GetFollowerListByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowerListByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetFollowerListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowerListByName indicates an expected call of GetFollowerListByName
func (mr *MockApiServiceServerMockRecorder) GetFollowerListByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowerListByName", reflect.TypeOf((*MockApiServiceServer)(nil).GetFollowerListByName), arg0, arg1)
}

// GetFollowingListByName mocks base method
func (m *MockApiServiceServer) GetFollowingListByName(arg0 context.Context, arg1 *pb.GetFollowingListByNameRequest) (*pb.GetFollowingListByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowingListByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetFollowingListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowingListByName indicates an expected call of GetFollowingListByName
func (mr *MockApiServiceServerMockRecorder) GetFollowingListByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowingListByName", reflect.TypeOf((*MockApiServiceServer)(nil).GetFollowingListByName), arg0, arg1)
}

// GetFollowCountByName mocks base method
func (m *MockApiServiceServer) GetFollowCountByName(arg0 context.Context, arg1 *pb.GetFollowCountByNameRequest) (*pb.GetFollowCountByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFollowCountByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetFollowCountByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFollowCountByName indicates an expected call of GetFollowCountByName
func (mr *MockApiServiceServerMockRecorder) GetFollowCountByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFollowCountByName", reflect.TypeOf((*MockApiServiceServer)(nil).GetFollowCountByName), arg0, arg1)
}

// GetBlockProducerList mocks base method
func (m *MockApiServiceServer) GetBlockProducerList(arg0 context.Context, arg1 *pb.GetBlockProducerListRequest) (*pb.GetBlockProducerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProducerList", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlockProducerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerList indicates an expected call of GetBlockProducerList
func (mr *MockApiServiceServerMockRecorder) GetBlockProducerList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerList", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockProducerList), arg0, arg1)
}

// GetPostListByCreated mocks base method
func (m *MockApiServiceServer) GetPostListByCreated(arg0 context.Context, arg1 *pb.GetPostListByCreatedRequest) (*pb.GetPostListByCreatedResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostListByCreated", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetPostListByCreatedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByCreated indicates an expected call of GetPostListByCreated
func (mr *MockApiServiceServerMockRecorder) GetPostListByCreated(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByCreated", reflect.TypeOf((*MockApiServiceServer)(nil).GetPostListByCreated), arg0, arg1)
}

// GetReplyListByPostId mocks base method
func (m *MockApiServiceServer) GetReplyListByPostId(arg0 context.Context, arg1 *pb.GetReplyListByPostIdRequest) (*pb.GetReplyListByPostIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReplyListByPostId", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetReplyListByPostIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReplyListByPostId indicates an expected call of GetReplyListByPostId
func (mr *MockApiServiceServerMockRecorder) GetReplyListByPostId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReplyListByPostId", reflect.TypeOf((*MockApiServiceServer)(nil).GetReplyListByPostId), arg0, arg1)
}

// GetBlockTransactionsByNum mocks base method
func (m *MockApiServiceServer) GetBlockTransactionsByNum(arg0 context.Context, arg1 *pb.GetBlockTransactionsByNumRequest) (*pb.GetBlockTransactionsByNumResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactionsByNum", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlockTransactionsByNumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactionsByNum indicates an expected call of GetBlockTransactionsByNum
func (mr *MockApiServiceServerMockRecorder) GetBlockTransactionsByNum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactionsByNum", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockTransactionsByNum), arg0, arg1)
}

// GetChainState mocks base method
func (m *MockApiServiceServer) GetChainState(arg0 context.Context, arg1 *pb.NonParamsRequest) (*pb.GetChainStateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainState", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetChainStateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainState indicates an expected call of GetChainState
func (mr *MockApiServiceServerMockRecorder) GetChainState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainState", reflect.TypeOf((*MockApiServiceServer)(nil).GetChainState), arg0, arg1)
}

// BroadcastTrx mocks base method
func (m *MockApiServiceServer) BroadcastTrx(arg0 context.Context, arg1 *pb.BroadcastTrxRequest) (*pb.BroadcastTrxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTrx", arg0, arg1)
	ret0, _ := ret[0].(*pb.BroadcastTrxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTrx indicates an expected call of BroadcastTrx
func (mr *MockApiServiceServerMockRecorder) BroadcastTrx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTrx", reflect.TypeOf((*MockApiServiceServer)(nil).BroadcastTrx), arg0, arg1)
}

// GetBlockList mocks base method
func (m *MockApiServiceServer) GetBlockList(arg0 context.Context, arg1 *pb.GetBlockListRequest) (*pb.GetBlockListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockList", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlockListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockList indicates an expected call of GetBlockList
func (mr *MockApiServiceServerMockRecorder) GetBlockList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockList", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockList), arg0, arg1)
}

// GetSignedBlock mocks base method
func (m *MockApiServiceServer) GetSignedBlock(arg0 context.Context, arg1 *pb.GetSignedBlockRequest) (*pb.GetSignedBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignedBlock", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetSignedBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignedBlock indicates an expected call of GetSignedBlock
func (mr *MockApiServiceServerMockRecorder) GetSignedBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignedBlock", reflect.TypeOf((*MockApiServiceServer)(nil).GetSignedBlock), arg0, arg1)
}

// GetAccountListByBalance mocks base method
func (m *MockApiServiceServer) GetAccountListByBalance(arg0 context.Context, arg1 *pb.GetAccountListByBalanceRequest) (*pb.GetAccountListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountListByBalance", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetAccountListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByBalance indicates an expected call of GetAccountListByBalance
func (mr *MockApiServiceServerMockRecorder) GetAccountListByBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByBalance", reflect.TypeOf((*MockApiServiceServer)(nil).GetAccountListByBalance), arg0, arg1)
}

// GetDailyTotalTrxInfo mocks base method
func (m *MockApiServiceServer) GetDailyTotalTrxInfo(arg0 context.Context, arg1 *pb.GetDailyTotalTrxRequest) (*pb.GetDailyTotalTrxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyTotalTrxInfo", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetDailyTotalTrxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyTotalTrxInfo indicates an expected call of GetDailyTotalTrxInfo
func (mr *MockApiServiceServerMockRecorder) GetDailyTotalTrxInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyTotalTrxInfo", reflect.TypeOf((*MockApiServiceServer)(nil).GetDailyTotalTrxInfo), arg0, arg1)
}

// GetTrxInfoById mocks base method
func (m *MockApiServiceServer) GetTrxInfoById(arg0 context.Context, arg1 *pb.GetTrxInfoByIdRequest) (*pb.GetTrxInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrxInfoById", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetTrxInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxInfoById indicates an expected call of GetTrxInfoById
func (mr *MockApiServiceServerMockRecorder) GetTrxInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxInfoById", reflect.TypeOf((*MockApiServiceServer)(nil).GetTrxInfoById), arg0, arg1)
}

// GetTrxListByTime mocks base method
func (m *MockApiServiceServer) GetTrxListByTime(arg0 context.Context, arg1 *pb.GetTrxListByTimeRequest) (*pb.GetTrxListByTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrxListByTime", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetTrxListByTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrxListByTime indicates an expected call of GetTrxListByTime
func (mr *MockApiServiceServerMockRecorder) GetTrxListByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrxListByTime", reflect.TypeOf((*MockApiServiceServer)(nil).GetTrxListByTime), arg0, arg1)
}

// GetPostListByCreateTime mocks base method
func (m *MockApiServiceServer) GetPostListByCreateTime(arg0 context.Context, arg1 *pb.GetPostListByCreateTimeRequest) (*pb.GetPostListByCreateTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostListByCreateTime", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetPostListByCreateTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByCreateTime indicates an expected call of GetPostListByCreateTime
func (mr *MockApiServiceServerMockRecorder) GetPostListByCreateTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByCreateTime", reflect.TypeOf((*MockApiServiceServer)(nil).GetPostListByCreateTime), arg0, arg1)
}

// GetPostListByName mocks base method
func (m *MockApiServiceServer) GetPostListByName(arg0 context.Context, arg1 *pb.GetPostListByNameRequest) (*pb.GetPostListByCreateTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostListByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetPostListByCreateTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByName indicates an expected call of GetPostListByName
func (mr *MockApiServiceServerMockRecorder) GetPostListByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByName", reflect.TypeOf((*MockApiServiceServer)(nil).GetPostListByName), arg0, arg1)
}

// TrxStatByHour mocks base method
func (m *MockApiServiceServer) TrxStatByHour(arg0 context.Context, arg1 *pb.TrxStatByHourRequest) (*pb.TrxStatByHourResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrxStatByHour", arg0, arg1)
	ret0, _ := ret[0].(*pb.TrxStatByHourResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrxStatByHour indicates an expected call of TrxStatByHour
func (mr *MockApiServiceServerMockRecorder) TrxStatByHour(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrxStatByHour", reflect.TypeOf((*MockApiServiceServer)(nil).TrxStatByHour), arg0, arg1)
}

// GetUserTrxListByTime mocks base method
func (m *MockApiServiceServer) GetUserTrxListByTime(arg0 context.Context, arg1 *pb.GetUserTrxListByTimeRequest) (*pb.GetUserTrxListByTimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserTrxListByTime", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetUserTrxListByTimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserTrxListByTime indicates an expected call of GetUserTrxListByTime
func (mr *MockApiServiceServerMockRecorder) GetUserTrxListByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserTrxListByTime", reflect.TypeOf((*MockApiServiceServer)(nil).GetUserTrxListByTime), arg0, arg1)
}

// GetPostInfoById mocks base method
func (m *MockApiServiceServer) GetPostInfoById(arg0 context.Context, arg1 *pb.GetPostInfoByIdRequest) (*pb.GetPostInfoByIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostInfoById", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetPostInfoByIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostInfoById indicates an expected call of GetPostInfoById
func (mr *MockApiServiceServerMockRecorder) GetPostInfoById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostInfoById", reflect.TypeOf((*MockApiServiceServer)(nil).GetPostInfoById), arg0, arg1)
}

// GetContractInfo mocks base method
func (m *MockApiServiceServer) GetContractInfo(arg0 context.Context, arg1 *pb.GetContractInfoRequest) (*pb.GetContractInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractInfo", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetContractInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractInfo indicates an expected call of GetContractInfo
func (mr *MockApiServiceServerMockRecorder) GetContractInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractInfo", reflect.TypeOf((*MockApiServiceServer)(nil).GetContractInfo), arg0, arg1)
}

// GetBlkIsIrreversibleByTxId mocks base method
func (m *MockApiServiceServer) GetBlkIsIrreversibleByTxId(arg0 context.Context, arg1 *pb.GetBlkIsIrreversibleByTxIdRequest) (*pb.GetBlkIsIrreversibleByTxIdResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlkIsIrreversibleByTxId", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlkIsIrreversibleByTxIdResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlkIsIrreversibleByTxId indicates an expected call of GetBlkIsIrreversibleByTxId
func (mr *MockApiServiceServerMockRecorder) GetBlkIsIrreversibleByTxId(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlkIsIrreversibleByTxId", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlkIsIrreversibleByTxId), arg0, arg1)
}

// GetAccountListByCreTime mocks base method
func (m *MockApiServiceServer) GetAccountListByCreTime(arg0 context.Context, arg1 *pb.GetAccountListByCreTimeRequest) (*pb.GetAccountListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountListByCreTime", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetAccountListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByCreTime indicates an expected call of GetAccountListByCreTime
func (mr *MockApiServiceServerMockRecorder) GetAccountListByCreTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByCreTime", reflect.TypeOf((*MockApiServiceServer)(nil).GetAccountListByCreTime), arg0, arg1)
}

// GetDailyStats mocks base method
func (m *MockApiServiceServer) GetDailyStats(arg0 context.Context, arg1 *pb.GetDailyStatsRequest) (*pb.GetDailyStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDailyStats", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetDailyStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDailyStats indicates an expected call of GetDailyStats
func (mr *MockApiServiceServerMockRecorder) GetDailyStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDailyStats", reflect.TypeOf((*MockApiServiceServer)(nil).GetDailyStats), arg0, arg1)
}

// GetMonthlyStats mocks base method
func (m *MockApiServiceServer) GetMonthlyStats(arg0 context.Context, arg1 *pb.GetMonthlysRequest) (*pb.GetMonthlysResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonthlyStats", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetMonthlysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonthlyStats indicates an expected call of GetMonthlyStats
func (mr *MockApiServiceServerMockRecorder) GetMonthlyStats(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonthlyStats", reflect.TypeOf((*MockApiServiceServer)(nil).GetMonthlyStats), arg0, arg1)
}

// GetContractListByTime mocks base method
func (m *MockApiServiceServer) GetContractListByTime(arg0 context.Context, arg1 *pb.GetContractListByTimeRequest) (*pb.GetContractListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractListByTime", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetContractListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractListByTime indicates an expected call of GetContractListByTime
func (mr *MockApiServiceServerMockRecorder) GetContractListByTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractListByTime", reflect.TypeOf((*MockApiServiceServer)(nil).GetContractListByTime), arg0, arg1)
}

// GetBlockProducerListByVoteCount mocks base method
func (m *MockApiServiceServer) GetBlockProducerListByVoteCount(arg0 context.Context, arg1 *pb.GetBlockProducerListByVoteCountRequest) (*pb.GetBlockProducerListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProducerListByVoteCount", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlockProducerListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerListByVoteCount indicates an expected call of GetBlockProducerListByVoteCount
func (mr *MockApiServiceServerMockRecorder) GetBlockProducerListByVoteCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerListByVoteCount", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockProducerListByVoteCount), arg0, arg1)
}

// GetPostListByVest mocks base method
func (m *MockApiServiceServer) GetPostListByVest(arg0 context.Context, arg1 *pb.GetPostListByVestRequest) (*pb.GetPostListByVestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostListByVest", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetPostListByVestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostListByVest indicates an expected call of GetPostListByVest
func (mr *MockApiServiceServerMockRecorder) GetPostListByVest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostListByVest", reflect.TypeOf((*MockApiServiceServer)(nil).GetPostListByVest), arg0, arg1)
}

// EstimateStamina mocks base method
func (m *MockApiServiceServer) EstimateStamina(arg0 context.Context, arg1 *pb.EsimateRequest) (*pb.EsimateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateStamina", arg0, arg1)
	ret0, _ := ret[0].(*pb.EsimateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateStamina indicates an expected call of EstimateStamina
func (mr *MockApiServiceServerMockRecorder) EstimateStamina(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateStamina", reflect.TypeOf((*MockApiServiceServer)(nil).EstimateStamina), arg0, arg1)
}

// GetNodeNeighbours mocks base method
func (m *MockApiServiceServer) GetNodeNeighbours(arg0 context.Context, arg1 *pb.NonParamsRequest) (*pb.GetNodeNeighboursResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeNeighbours", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetNodeNeighboursResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeNeighbours indicates an expected call of GetNodeNeighbours
func (mr *MockApiServiceServerMockRecorder) GetNodeNeighbours(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeNeighbours", reflect.TypeOf((*MockApiServiceServer)(nil).GetNodeNeighbours), arg0, arg1)
}

// GetMyStakers mocks base method
func (m *MockApiServiceServer) GetMyStakers(arg0 context.Context, arg1 *pb.GetMyStakerListByNameRequest) (*pb.GetMyStakerListByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyStakers", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetMyStakerListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyStakers indicates an expected call of GetMyStakers
func (mr *MockApiServiceServerMockRecorder) GetMyStakers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyStakers", reflect.TypeOf((*MockApiServiceServer)(nil).GetMyStakers), arg0, arg1)
}

// GetMyStakes mocks base method
func (m *MockApiServiceServer) GetMyStakes(arg0 context.Context, arg1 *pb.GetMyStakeListByNameRequest) (*pb.GetMyStakeListByNameResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyStakes", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetMyStakeListByNameResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyStakes indicates an expected call of GetMyStakes
func (mr *MockApiServiceServerMockRecorder) GetMyStakes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyStakes", reflect.TypeOf((*MockApiServiceServer)(nil).GetMyStakes), arg0, arg1)
}

// GetNodeRunningVersion mocks base method
func (m *MockApiServiceServer) GetNodeRunningVersion(arg0 context.Context, arg1 *pb.NonParamsRequest) (*pb.GetNodeRunningVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeRunningVersion", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetNodeRunningVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeRunningVersion indicates an expected call of GetNodeRunningVersion
func (mr *MockApiServiceServerMockRecorder) GetNodeRunningVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeRunningVersion", reflect.TypeOf((*MockApiServiceServer)(nil).GetNodeRunningVersion), arg0, arg1)
}

// GetAccountListByVest mocks base method
func (m *MockApiServiceServer) GetAccountListByVest(arg0 context.Context, arg1 *pb.GetAccountListByVestRequest) (*pb.GetAccountListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountListByVest", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetAccountListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountListByVest indicates an expected call of GetAccountListByVest
func (mr *MockApiServiceServerMockRecorder) GetAccountListByVest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountListByVest", reflect.TypeOf((*MockApiServiceServer)(nil).GetAccountListByVest), arg0, arg1)
}

// GetBlockProducerByName mocks base method
func (m *MockApiServiceServer) GetBlockProducerByName(arg0 context.Context, arg1 *pb.GetBlockProducerByNameRequest) (*pb.BlockProducerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProducerByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.BlockProducerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerByName indicates an expected call of GetBlockProducerByName
func (mr *MockApiServiceServerMockRecorder) GetBlockProducerByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerByName", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockProducerByName), arg0, arg1)
}

// GetAccountByPubKey mocks base method
func (m *MockApiServiceServer) GetAccountByPubKey(arg0 context.Context, arg1 *pb.GetAccountByPubKeyRequest) (*pb.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByPubKey", arg0, arg1)
	ret0, _ := ret[0].(*pb.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByPubKey indicates an expected call of GetAccountByPubKey
func (mr *MockApiServiceServerMockRecorder) GetAccountByPubKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByPubKey", reflect.TypeOf((*MockApiServiceServer)(nil).GetAccountByPubKey), arg0, arg1)
}

// GetBlockBFTInfoByNum mocks base method
func (m *MockApiServiceServer) GetBlockBFTInfoByNum(arg0 context.Context, arg1 *pb.GetBlockBFTInfoByNumRequest) (*pb.GetBlockBFTInfoByNumResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockBFTInfoByNum", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlockBFTInfoByNumResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockBFTInfoByNum indicates an expected call of GetBlockBFTInfoByNum
func (mr *MockApiServiceServerMockRecorder) GetBlockBFTInfoByNum(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockBFTInfoByNum", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockBFTInfoByNum), arg0, arg1)
}

// GetAppTableRecord mocks base method
func (m *MockApiServiceServer) GetAppTableRecord(arg0 context.Context, arg1 *pb.GetAppTableRecordRequest) (*pb.GetAppTableRecordResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppTableRecord", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetAppTableRecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppTableRecord indicates an expected call of GetAppTableRecord
func (mr *MockApiServiceServerMockRecorder) GetAppTableRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppTableRecord", reflect.TypeOf((*MockApiServiceServer)(nil).GetAppTableRecord), arg0, arg1)
}

// GetBlockProducerVoterList mocks base method
func (m *MockApiServiceServer) GetBlockProducerVoterList(arg0 context.Context, arg1 *pb.GetBlockProducerVoterListRequest) (*pb.GetBlockProducerVoterListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockProducerVoterList", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetBlockProducerVoterListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockProducerVoterList indicates an expected call of GetBlockProducerVoterList
func (mr *MockApiServiceServerMockRecorder) GetBlockProducerVoterList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockProducerVoterList", reflect.TypeOf((*MockApiServiceServer)(nil).GetBlockProducerVoterList), arg0, arg1)
}

// GetVestDelegationOrderList mocks base method
func (m *MockApiServiceServer) GetVestDelegationOrderList(arg0 context.Context, arg1 *pb.GetVestDelegationOrderListRequest) (*pb.GetVestDelegationOrderListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVestDelegationOrderList", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetVestDelegationOrderListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVestDelegationOrderList indicates an expected call of GetVestDelegationOrderList
func (mr *MockApiServiceServerMockRecorder) GetVestDelegationOrderList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVestDelegationOrderList", reflect.TypeOf((*MockApiServiceServer)(nil).GetVestDelegationOrderList), arg0, arg1)
}
